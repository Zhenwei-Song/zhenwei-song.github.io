<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TCP 状态转移解析</title>
      <link href="/2025/09/22/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E8%A7%A3%E6%9E%90/"/>
      <url>/2025/09/22/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>TCP（传输控制协议）是一种面向连接、可靠的传输层协议，其状态转移机制是实现“三次握手”建立连接、“四次挥手”关闭连接及数据传输过程中异常处理的核心。理解 TCP 状态转移，需先明确 11 种核心状态，再围绕“连接建立-数据传输-连接关闭”三大阶段梳理状态变迁逻辑。</p><h1 id="一、TCP-核心状态定义"><a href="#一、TCP-核心状态定义" class="headerlink" title="一、TCP 核心状态定义"></a>一、TCP 核心状态定义</h1><p>首先明确每种状态的含义，这是理解状态转移的基础：</p><table><tr><td>状态名称（英文）<br/></td><td>状态名称（中文）<br/></td><td>核心含义<br/></td></tr><tr><td>CLOSED<br/></td><td>关闭状态<br/></td><td>TCP连接的初始/最终状态，无任何连接活动。<br/></td></tr><tr><td>LISTEN<br/></td><td>监听状态<br/></td><td>服务器端处于“等待客户端连接请求”的状态（如调用`listen()`后）。<br/></td></tr><tr><td>SYN_SENT<br/></td><td>同步已发送<br/></td><td>客户端发送连接请求（SYN报文）后，等待服务器确认的状态。<br/></td></tr><tr><td>SYN_RCVD<br/></td><td>同步已接收<br/></td><td>服务器收到客户端SYN报文，回复SYN+ACK报文后，等待客户端最终确认的状态。<br/></td></tr><tr><td>ESTABLISHED<br/></td><td>已建立连接<br/></td><td>客户端与服务器完成“三次握手”，连接正式建立，可进行数据传输的状态（核心工作状态）。<br/></td></tr><tr><td>FIN_WAIT_1<br/></td><td>终止等待1<br/></td><td>主动关闭方（客户端/服务器均可）发送关闭请求（FIN报文）后，等待对方确认的状态。<br/></td></tr><tr><td>FIN_WAIT_2<br/></td><td>终止等待2<br/></td><td>主动关闭方收到对方对FIN的确认（ACK报文）后，等待对方发送其自身FIN报文的状态。<br/></td></tr><tr><td>CLOSE_WAIT<br/></td><td>关闭等待<br/></td><td>被动关闭方收到主动关闭方的FIN报文并回复ACK后，等待自身应用层“确认关闭”的状态（此时仍可接收数据）。<br/></td></tr><tr><td>CLOSING<br/></td><td>关闭中<br/></td><td>双方同时发起关闭请求：主动关闭方发送FIN后，未收到ACK却先收到对方的FIN，此时进入该状态，等待对方ACK。<br/></td></tr><tr><td>LAST_ACK<br/></td><td>最后确认<br/></td><td>被动关闭方发送自身的FIN报文后，等待主动关闭方确认（ACK）的状态。<br/></td></tr><tr><td>TIME_WAIT<br/></td><td>时间等待<br/></td><td>主动关闭方收到被动关闭方的FIN报文并回复ACK后，不立即关闭，而是等待2MSL（报文最大生存时间，通常1-2分钟） 的状态（核心作用：避免延迟报文干扰新连接）。<br/></td></tr></table><h1 id="二、TCP-状态转移的三大核心阶段"><a href="#二、TCP-状态转移的三大核心阶段" class="headerlink" title="二、TCP 状态转移的三大核心阶段"></a>二、TCP 状态转移的三大核心阶段</h1><p>TCP 状态转移并非孤立，而是围绕“连接建立-数据传输-连接关闭”形成闭环，以下分阶段解析（结合经典场景：客户端主动发起连接，主动关闭连接）。</p><h2 id="阶段-1：三次握手（建立连接）——-从-CLOSED-到-ESTABLISHED"><a href="#阶段-1：三次握手（建立连接）——-从-CLOSED-到-ESTABLISHED" class="headerlink" title="阶段 1：三次握手（建立连接）—— 从 CLOSED 到 ESTABLISHED"></a>阶段 1：三次握手（建立连接）—— 从 CLOSED 到 ESTABLISHED</h2><p>此阶段是客户端与服务器通过 3 次报文交互，确认双方“发送&#x2F;接收能力正常”，最终进入可传输数据的 ESTABLISHED 状态。</p><table><tr><td>步骤<br/></td><td>发起方<br/></td><td>状态变迁<br/></td><td>核心动作（报文）<br/></td><td>目的<br/></td></tr><tr><td>1<br/></td><td>客户端<br/></td><td>CLOSED → SYN_SENT<br/></td><td>发送<strong>SYN报文</strong>（同步序列编号，告诉服务器“我要连接，我的初始序号是X”）<br/></td><td>发起连接请求，测试服务器接收能力<br/></td></tr><tr><td>2<br/></td><td>服务器<br/></td><td>LISTEN → SYN_RCVD<br/></td><td>回复<strong>SYN+ACK报文</strong>（告诉客户端“我收到你的请求，我的初始序号是Y，确认你的序号X”）<br/></td><td>确认客户端请求，同时发起服务器的同步请求<br/></td></tr><tr><td>3<br/></td><td>客户端<br/></td><td>SYN_SENT → ESTABLISHED<br/></td><td>发送<strong>ACK报文</strong>（告诉服务器“我收到你的同步请求，确认你的序号Y”）<br/></td><td>最终确认服务器请求，客户端先进入连接状态<br/></td></tr><tr><td>4<br/></td><td>服务器<br/></td><td>SYN_RCVD → ESTABLISHED<br/></td><td>收到客户端<strong>ACK报文</strong><br/></td><td>服务器确认客户端最终响应，双方进入连接状态<br/></td></tr></table><p><strong>关键说明</strong>：</p><ul><li>服务器需先通过 <code>socket()</code> 创建套接字，再调用 <code>listen()</code> 进入 LISTEN 状态，才能接收客户端连接；</li><li>三次握手的核心是“避免因延迟的 SYN 报文建立无效连接”（如客户端旧 SYN 报文迟到，服务器若直接建立连接会浪费资源，三次握手可通过序号确认过滤无效请求）。</li></ul><h2 id="阶段-2：数据传输（连接维持）——-稳定在-ESTABLISHED"><a href="#阶段-2：数据传输（连接维持）——-稳定在-ESTABLISHED" class="headerlink" title="阶段 2：数据传输（连接维持）—— 稳定在 ESTABLISHED"></a>阶段 2：数据传输（连接维持）—— 稳定在 ESTABLISHED</h2><p>双方进入 ESTABLISHED 状态后，可双向传输数据。此阶段<strong>状态不变</strong>，核心是通过“序号（Seq）”“确认号（Ack）”“滑动窗口”保证数据的可靠传输（如丢包重传、流量控制、拥塞控制）。</p><ul><li>若某一方需暂时停止传输，会发送“窗口大小&#x3D;0”的报文，对方进入“窗口关闭”等待状态；一旦窗口重新开放，恢复数据传输，状态仍为 ESTABLISHED。</li></ul><h2 id="阶段-3：四次挥手（关闭连接）——-从-ESTABLISHED-到-CLOSED"><a href="#阶段-3：四次挥手（关闭连接）——-从-ESTABLISHED-到-CLOSED" class="headerlink" title="阶段 3：四次挥手（关闭连接）—— 从 ESTABLISHED 到 CLOSED"></a>阶段 3：四次挥手（关闭连接）—— 从 ESTABLISHED 到 CLOSED</h2><p>TCP 是“双向连接”，关闭时需双方分别确认“不再发送数据”，因此需 4 次报文交互（因被动关闭方可能仍有数据未发送，需先回复 ACK，再延迟发送 FIN）。</p><table><tr><td>步骤<br/></td><td>发起方（主动关闭方，如客户端）<br/></td><td>被动关闭方（如服务器）<br/></td><td>核心动作（报文）<br/></td><td>状态变迁<br/></td></tr><tr><td>1<br/></td><td>客户端决定关闭连接<br/></td><td>-<br/></td><td>发送<strong>FIN报文</strong>（告诉服务器“我不再发数据了，你可以准备关闭”）<br/></td><td>客户端：ESTABLISHED → FIN_WAIT_1<br/><br/></td></tr><tr><td>2<br/></td><td>-<br/></td><td>服务器收到FIN<br/></td><td>回复<strong>ACK报文</strong>（告诉客户端“我收到你的关闭请求，会尽快处理”）<br/></td><td>服务器：ESTABLISHED → CLOSE_WAIT<br/></td></tr><tr><td>3<br/></td><td>客户端收到ACK<br/></td><td><strong>服务器处理完剩余数据后</strong><br/><br/></td><td>-<br/></td><td>客户端：FIN_WAIT_1 → FIN_WAIT_2（等待服务器的FIN）<br/></td></tr><tr><td>4<br/></td><td>-<br/></td><td>服务器发送<strong>FIN报文</strong>（告诉客户端“我也不再发数据了，你可以关闭”）<br/></td><td>服务器：CLOSE_WAIT → LAST_ACK<br/></td><td><br/></td></tr><tr><td>5<br/></td><td>客户端收到FIN<br/></td><td>-<br/><br/></td><td>发送<strong>ACK报文</strong>（告诉服务器“我收到你的关闭请求，确认关闭”）<br/></td><td>客户端：FIN_WAIT_2 → TIME_WAIT<br/></td></tr><tr><td>6<br/></td><td>客户端等待2MSL<br/></td><td>服务器收到ACK<br/></td><td>-<br/></td><td>服务器：LAST_ACK → CLOSED（被动关闭方先完成关闭）<br/></td></tr><tr><td>7<br/></td><td>客户端2MSL超时<br/></td><td>-<br/><br/></td><td>无报文，直接释放资源<br/></td><td>客户端：TIME_WAIT → CLOSED（主动关闭方完成关闭）<br/></td></tr></table><p><strong>关键说明</strong>：</p><ol><li><p><strong>为什么需要四次挥手？</strong>因为 TCP 是双向通信，关闭时需分别关闭“客户端 → 服务器”和“服务器 → 客户端”两个方向的连接：</p><ul><li>第 1-2 步：关闭“客户端 → 服务器”的发送方向；</li><li>第 3-4 步：关闭“服务器 → 客户端”的发送方向。若服务器仍有数据未发送，会在 CLOSE_WAIT 状态中处理完数据，再发送 FIN，因此无法像三次握手那样将“SYN+ACK”合并为一次报文。</li></ul></li><li><p><strong>TIME_WAIT 状态的核心作用（最易误解的状态）</strong>：</p><ul><li>确保被动关闭方收到最终的 ACK（若 ACK 丢失，服务器会重发 FIN，客户端在 TIME_WAIT 内可再次回复 ACK）；</li><li>避免延迟报文干扰新连接（2MSL 是报文在网络中最大生存时间，超时后网络中所有旧连接的报文都会失效，新连接不会被旧报文混淆）。</li><li><strong>注意</strong>：TIME_WAIT 是主动关闭方的必经状态，若服务器频繁主动关闭连接（如短连接服务），会积累大量 TIME_WAIT 连接，需通过内核参数（如 <code>net.ipv4.tcp_tw_reuse</code>）优化。</li></ul></li></ol><h1 id="三、特殊状态转移场景"><a href="#三、特殊状态转移场景" class="headerlink" title="三、特殊状态转移场景"></a>三、特殊状态转移场景</h1><p>除了“正常三次握手&#x2F;四次挥手”，还存在两种特殊场景，对应 CLOSING 状态：</p><h2 id="场景：双方同时发起关闭请求"><a href="#场景：双方同时发起关闭请求" class="headerlink" title="场景：双方同时发起关闭请求"></a>场景：双方同时发起关闭请求</h2><p>若客户端和服务器在 ESTABLISHED 状态下，同时向对方发送 FIN 报文：</p><ol><li>客户端发送 FIN 后，进入 FIN_WAIT_1，未收到 ACK 却先收到服务器的 FIN → 客户端状态变为 CLOSING；</li><li>服务器发送 FIN 后，进入 FIN_WAIT_1，未收到 ACK 却先收到客户端的 FIN → 服务器状态变为 CLOSING；</li><li>双方各自收到对方的 FIN 后，回复 ACK；</li><li>双方收到 ACK 后，均进入 TIME_WAIT，等待 2MSL 后关闭。</li></ol><p>这种场景极少发生，CLOSING 状态是临时过渡状态，最终仍会通过 TIME_WAIT 走向 CLOSED。</p><h1 id="四、TCP-状态转移总结图（简化版）"><a href="#四、TCP-状态转移总结图（简化版）" class="headerlink" title="四、TCP 状态转移总结图（简化版）"></a>四、TCP 状态转移总结图（简化版）</h1><p>为直观理解，可参考以下简化的状态转移路径（以客户端视角为主）：</p><p><code>CLOSED → SYN_SENT → ESTABLISHED → FIN_WAIT_1 → FIN_WAIT_2 → TIME_WAIT → CLOSED</code></p><p>服务器视角的核心路径：</p><p><code>CLOSED → LISTEN → SYN_RCVD → ESTABLISHED → CLOSE_WAIT → LAST_ACK → CLOSED</code></p><h1 id="五、常见问题与排查"><a href="#五、常见问题与排查" class="headerlink" title="五、常见问题与排查"></a>五、常见问题与排查</h1><ol><li><p><strong>大量 CLOSE_WAIT 状态的原因？</strong><br>被动关闭方（如服务器）收到 FIN 后，回复 ACK 进入 CLOSE_WAIT，但应用层未调用 <code>close()</code> 释放连接，导致状态无法进入 LAST_ACK。需排查应用层代码（如资源泄漏、未处理关闭事件）。</p></li><li><p><strong>大量 TIME_WAIT 状态的影响？</strong><br>每个 TIME_WAIT 状态会占用一个端口（客户端端口），若短连接频繁建立&#x2F;关闭，会导致端口耗尽。解决方案：</p><ul><li>开启 <code>net.ipv4.tcp_tw_reuse</code>（允许 TIME_WAIT 状态的端口被复用）；</li><li>调整 <code>net.ipv4.tcp_tw_timeout</code>（缩短 TIME_WAIT 超时时间，不建议小于 1 分钟）。</li></ul></li><li><p><strong>SYN_RCVD 状态堆积的原因？</strong><br>服务器收到 SYN 后回复 SYN+ACK，但客户端未回复 ACK，导致服务器停留在 SYN_RCVD。可能原因：客户端异常退出、网络丢包、SYN 洪水攻击（需开启 TCP SYN Cookie 防御）。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 通信协议 </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2025/09/22/Git/"/>
      <url>/2025/09/22/Git/</url>
      
        <content type="html"><![CDATA[<p>以下是 Git 常用操作的整理</p><h1 id="一、基础配置（首次使用必做）"><a href="#一、基础配置（首次使用必做）" class="headerlink" title="一、基础配置（首次使用必做）"></a>一、基础配置（首次使用必做）</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置用户名和邮箱（关联远程仓库提交记录）</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"Your Name"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"your.email@example.com"</span><span class="token comment"># 查看配置信息</span><span class="token function">git</span> config <span class="token parameter variable">--list</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>绑定 SSH 密钥到 Git 仓库（如 GitHub、GitLab 等）可以实现免密码拉取和推送代码，<strong>且使用 SSH 更加稳定</strong>，操作步骤如下：</p><h2 id="一、检查是否已有-SSH-密钥"><a href="#一、检查是否已有-SSH-密钥" class="headerlink" title="一、检查是否已有 SSH 密钥"></a>一、检查是否已有 SSH 密钥</h2><p>首先查看本地是否已存在 SSH 密钥（避免重复创建）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入 SSH 密钥目录</span><span class="token builtin class-name">cd</span> ~/.ssh<span class="token comment"># 列出目录下的文件</span><span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若看到 <code>id_rsa</code>（私钥）和 <code>id_rsa.pub</code>（公钥），说明已有密钥，可直接跳到步骤三。</p><h2 id="二、生成新的-SSH-密钥"><a href="#二、生成新的-SSH-密钥" class="headerlink" title="二、生成新的 SSH 密钥"></a>二、生成新的 SSH 密钥</h2><p>若没有密钥，执行以下命令生成（一路回车，无需设置密码，除非需要额外安全验证）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 替换为你的 Git 绑定邮箱</span>ssh-keygen <span class="token parameter variable">-t</span> ed25519 <span class="token parameter variable">-C</span> <span class="token string">"your_email@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>若系统不支持 <code>ed25519</code> 算法，可使用旧算法：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-C</span> <span class="token string">"your_email@example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行后会在 <code>~/.ssh</code> 目录下生成 <code>id_ed25519</code>（或 <code>id_rsa</code>）和 <code>id_ed25519.pub</code>（或 <code>id_rsa.pub</code>）文件。</p><h2 id="三、查看并复制公钥内容"><a href="#三、查看并复制公钥内容" class="headerlink" title="三、查看并复制公钥内容"></a>三、查看并复制公钥内容</h2><p>需要将公钥（<code>.pub</code> 文件）的内容添加到 Git 仓库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看公钥内容（以 ed25519 为例，若用 rsa 则替换为 id_rsa.pub）</span><span class="token function">cat</span> ~/.ssh/id_ed25519.pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出类似如下内容，完整复制从 <strong>ssh-ed25519</strong> 开始到邮箱结束的所有字符：</p><pre class="line-numbers language-none"><code class="language-none">ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIK5cR44xQJz8G9xQZQZQZQZQZQZQZQZQZQZQZQZQZ your_email@example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、在-Git-仓库中添加-SSH-公钥"><a href="#四、在-Git-仓库中添加-SSH-公钥" class="headerlink" title="四、在 Git 仓库中添加 SSH 公钥"></a>四、在 Git 仓库中添加 SSH 公钥</h2><p>以 GitHub 为例（其他平台如 GitLab、Gitee 步骤类似）：</p><ol><li>登录 GitHub，点击右上角头像 → Settings；</li><li>在左侧菜单找到 <strong>SSH and GPG keys</strong> → 点击 New SSH key；</li><li>在 <strong>Title</strong> 中填写一个标识（如“我的笔记本”）；</li><li>在 <strong>Key</strong> 中粘贴刚才复制的公钥内容；</li><li>点击 Add SSH key，完成添加。</li></ol><h2 id="五、验证-SSH-连接"><a href="#五、验证-SSH-连接" class="headerlink" title="五、验证 SSH 连接"></a>五、验证 SSH 连接</h2><p>添加后，验证是否绑定成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 针对 GitHub 的验证命令</span><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span class="token comment"># 针对 GitLab 的验证命令</span><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@gitlab.com<span class="token comment"># 针对 Gitee 的验证命令</span><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@gitee.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首次连接会提示确认，输入 <code>yes</code> 回车。若看到类似以下信息，说明绑定成功：</p><pre class="line-numbers language-none"><code class="language-none">Hi username! You&#39;ve successfully authenticated, but GitHub does not provide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="六、修改仓库远程地址为-SSH-格式（若之前用-HTTPS）"><a href="#六、修改仓库远程地址为-SSH-格式（若之前用-HTTPS）" class="headerlink" title="六、修改仓库远程地址为 SSH 格式（若之前用 HTTPS）"></a>六、修改仓库远程地址为 SSH 格式（若之前用 HTTPS）</h3><p>如果之前仓库是用 HTTPS 地址克隆的，需修改为 SSH 地址才能使用 SSH 密钥：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看当前远程地址</span><span class="token function">git</span> remote <span class="token parameter variable">-v</span><span class="token comment"># 修改远程地址为 SSH 格式（以 GitHub 为例）</span><span class="token function">git</span> remote set-url origin git@github.com:username/repo.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SSH 格式的仓库地址一般为：<code>git@域名:用户名/仓库名.git</code>（可在仓库页面的 <code>Clone</code> 按钮中获取）。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>私钥（<code>id_rsa</code> 或 <code>id_ed25519</code>）是核心凭证，切勿泄露给他人；</li><li>一台设备只需生成一次 SSH 密钥，<strong>可绑定到多个 Git 仓库</strong>；</li><li>若更换设备，需要重新生成并添加新的 SSH 密钥。</li></ul><p>绑定完成后，后续操作 <code>git pull</code>、<code>git push</code> 就无需输入密码了。</p><h1 id="二、克隆"><a href="#二、克隆" class="headerlink" title="二、克隆"></a>二、克隆</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 克隆远程仓库到本地（默认拉取所有分支）</span><span class="token function">git</span> clone <span class="token operator">&lt;</span>远程仓库地址<span class="token operator">></span>  <span class="token comment"># 例如：git clone https://github.com/username/repo.git</span><span class="token comment"># 克隆后进入仓库目录</span><span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>仓库名<span class="token operator">></span><span class="token comment"># 查看远程仓库信息（确认关联的远程地址）</span><span class="token function">git</span> remote <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、本地提交与推送"><a href="#三、本地提交与推送" class="headerlink" title="三、本地提交与推送"></a>三、本地提交与推送</h1><h2 id="1-新建文件-修改后提交"><a href="#1-新建文件-修改后提交" class="headerlink" title="1. 新建文件&#x2F;修改后提交"></a>1. 新建文件&#x2F;修改后提交</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看工作区文件状态（哪些文件被修改/新增/删除）</span><span class="token function">git</span> status<span class="token comment"># 将文件添加到暂存区（. 表示所有修改，也可指定文件名）</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>  <span class="token comment"># 或 git add &lt;文件名></span><span class="token comment"># 提交暂存区文件到本地仓库，-m 后跟提交说明（必填）</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"提交说明：例如修复登录bug、新增首页组件等"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-推送到远程仓库"><a href="#2-推送到远程仓库" class="headerlink" title="2. 推送到远程仓库"></a>2. 推送到远程仓库</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 首次推送当前分支到远程（需指定远程仓库名和分支名，通常远程名为origin）</span><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin <span class="token operator">&lt;</span>分支名<span class="token operator">></span>  <span class="token comment"># 例如：git push -u origin main</span><span class="token comment"># 非首次推送（已关联远程分支后）</span><span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-拉取远程最新代码（避免冲突）"><a href="#3-拉取远程最新代码（避免冲突）" class="headerlink" title="3. 拉取远程最新代码（避免冲突）"></a>3. 拉取远程最新代码（避免冲突）</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 拉取远程当前分支的最新代码并合并到本地</span><span class="token function">git</span> pull<span class="token comment"># 等价于 git fetch（拉取远程更新但不合并） + git merge（合并到本地）</span><span class="token function">git</span> fetch origin <span class="token operator">&lt;</span>分支名<span class="token operator">></span><span class="token function">git</span> merge origin/<span class="token operator">&lt;</span>分支名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将本地当前分支推送到远程仓库的指定分支"><a href="#将本地当前分支推送到远程仓库的指定分支" class="headerlink" title="将本地当前分支推送到远程仓库的指定分支"></a>将本地当前分支推送到远程仓库的指定分支</h2><p>要将本地当前分支推送到远程仓库的指定分支，可以使用 <code>git push</code> 命令并指定远程仓库名称和目标分支名。具体操作如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 推送本地当前分支到远程的指定分支</span><span class="token function">git</span> push <span class="token operator">&lt;</span>远程仓库名<span class="token operator">></span> <span class="token operator">&lt;</span>本地当前分支名<span class="token operator">></span>:<span class="token operator">&lt;</span>远程目标分支名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="常见场景示例："><a href="#常见场景示例：" class="headerlink" title="常见场景示例："></a>常见场景示例：</h3><ol><li><strong>默认远程仓库（origin）的情况</strong>：</li></ol><p>通常远程仓库默认名称为 <code>origin</code>，如果要将本地当前分支 <code>dev</code> 推送到远程的 <code>test</code> 分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin dev:test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><strong>本地分支与远程目标分支名称相同</strong>：</li></ol><p>若要推送本地 <code>main</code> 分支到远程同名的 <code>main</code> 分支（最常用场景）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin main:main<span class="token comment"># 简化写法（当本地分支与远程目标分支同名时）</span><span class="token function">git</span> push origin main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li><strong>首次推送并关联分支</strong>：</li></ol><p>如果是第一次推送该分支到远程，<strong>且希望后续可直接用 </strong><strong>git push</strong><strong> 推送</strong>，可以加上 <code>-u</code> 参数关联分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin 本地分支名:远程目标分支名<span class="token comment"># 示例：将本地feature分支首次推送到远程的beta分支并关联</span><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin feature:beta<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ul><li>推送前建议先执行 <code>git pull</code> 拉取远程目标分支的最新代码，避免冲突。</li><li>如果远程目标分支不存在，<strong>该命令会自动在远程创建这个分支</strong>。</li><li>若推送失败（如提示权限不足或分支保护），需检查远程仓库的访问权限或分支规则。</li></ul><h1 id="四、分支操作"><a href="#四、分支操作" class="headerlink" title="四、分支操作"></a>四、分支操作</h1><p>在 Git 中，<strong>分支（Branch）</strong> 可以允许你在不影响主代码的情况下，独立开发新功能、修复 bug 或尝试实验性改动。</p><p>举例：你正在写一篇论文（主分支），突然想加一个新章节，但又怕写坏了影响正文。这时你可以复印一份论文（创建分支），在复印件上随意修改。满意后，再把修改的部分合并到原文里；如果不满意，直接丢掉复印件即可，原文不会受任何影响。</p><h2 id="为什么需要分支？"><a href="#为什么需要分支？" class="headerlink" title="为什么需要分支？"></a>为什么需要分支？</h2><ol><li><strong>隔离开发</strong>：多人协作时，每个人在自己的分支开发，互不干扰（比如甲开发支付功能，乙开发登录功能）。</li><li><strong>保护主代码</strong>：主分支（通常叫 <code>main</code> 或 <code>master</code>）保持稳定可运行，新功能在分支上完成测试后再合并。</li><li><strong>灵活实验</strong>：可以在分支上尝试激进的改动，失败了直接删除分支即可，不影响主代码。</li><li><strong>版本管理</strong>：不同分支可以对应不同版本（比如 <code>v1.0</code> 分支修复旧版本 bug，<code>v2.0</code> 分支开发新功能）。</li></ol><h2 id="分支的核心概念"><a href="#分支的核心概念" class="headerlink" title="分支的核心概念"></a>分支的核心概念</h2><ul><li><strong>主分支（Main&#x2F;Master）</strong>：项目的 “正式版本” 分支，通常存放可发布的代码。</li><li><strong>功能分支（Feature Branch）</strong>：为开发新功能创建的分支（如 <code>feature/payment</code>）。</li><li><strong>bugfix 分支</strong>：为修复特定 bug 创建的分支（如 <code>bugfix/login-error</code>）。</li><li><strong>分支指针</strong>：Git 用一个叫 <code>HEAD</code> 的指针标记当前所在的分支，切换分支就是移动这个指针。</li></ul><h2 id="举个通俗例子"><a href="#举个通俗例子" class="headerlink" title="举个通俗例子"></a>举个通俗例子</h2><p>假设团队开发一个购物网站：</p><ol><li>初始时只有 <code>main</code> 分支，包含基础的商品展示功能。</li><li>开发者 A 想加 “购物车” 功能，创建 <code>feature/cart</code> 分支，在这个分支上写代码，<code>main</code> 分支不受影响。</li><li>同时开发者 B 发现商品展示有 bug，创建 <code>bugfix/display</code> 分支修复，不干扰 A 的工作。</li><li>A 完成后，把 <code>feature/cart</code> 合并到 <code>main</code>，购物车功能正式上线。</li><li>B 修复后，把 <code>bugfix/display</code> 合并到 <code>main</code>，bug 被修复。</li></ol><p>整个过程中，<code>main</code> 分支始终保持可运行状态，且 A 和 B 的工作互不冲突。</p><h2 id="分支的本质（简单技术视角）"><a href="#分支的本质（简单技术视角）" class="headerlink" title="分支的本质（简单技术视角）"></a>分支的本质（简单技术视角）</h2><p>Git 的分支本质上是一个 “指针”，指向某个提交记录（代码快照）。创建分支时，Git 不会复制整个项目文件，只会新建一个指针，因此分支操作非常轻量（毫秒级完成）。</p><p>比如：</p><ul><li>你在 <code>main</code> 分支有 10 次提交，创建 <code>dev</code> 分支后，<code>dev</code> 指针和 <code>main</code> 指针指向同一个提交。</li><li>当你在 <code>dev</code> 上做新提交，<code>dev</code> 指针会向前移动，而 <code>main</code> 指针保持不变，形成两条平行的提交历史。</li></ul><h2 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看所有分支（本地+远程，*表示当前分支）</span><span class="token function">git</span> branch <span class="token parameter variable">-a</span><span class="token comment"># 创建新分支并切换到该分支</span><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token operator">&lt;</span>新分支名<span class="token operator">></span>  <span class="token comment"># 或 git switch -c &lt;新分支名>（Git 2.23+）</span><span class="token comment"># 切换到已有分支</span><span class="token function">git</span> checkout <span class="token operator">&lt;</span>分支名<span class="token operator">></span>  <span class="token comment"># 或 git switch &lt;分支名></span><span class="token comment"># 删除本地分支（确保已合并，未合并需加 -D 强制删除）</span><span class="token function">git</span> branch <span class="token parameter variable">-d</span> <span class="token operator">&lt;</span>分支名<span class="token operator">></span>  <span class="token comment"># 安全删除（需合并）</span><span class="token function">git</span> branch <span class="token parameter variable">-D</span> <span class="token operator">&lt;</span>分支名<span class="token operator">></span>  <span class="token comment"># 强制删除（未合并也可删）</span><span class="token comment"># 删除远程分支</span><span class="token function">git</span> push origin <span class="token parameter variable">--delete</span> <span class="token operator">&lt;</span>远程分支名<span class="token operator">></span><span class="token comment"># 将本地分支推送到远程（创建远程分支）</span><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin <span class="token operator">&lt;</span>本地分支名<span class="token operator">></span><span class="token comment">#合并目标分支（如 feature/login）到当前分支</span><span class="token function">git</span> merge feature/login<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、cherry-pick（选择性合并提交）"><a href="#五、cherry-pick（选择性合并提交）" class="headerlink" title="五、cherry-pick（选择性合并提交）"></a>五、cherry-pick（选择性合并提交）</h1><p>用于将某分支的单个或多个特定提交合并到当前分支（无需合并整个分支）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 先查看目标分支的提交记录，获取需要合并的提交哈希（前6-8位即可）</span><span class="token function">git</span> log <span class="token operator">&lt;</span>目标分支名<span class="token operator">></span>  <span class="token comment"># 例如：git log feature/login</span><span class="token comment"># 输出类似：commit a1b2c3d4...（哈希值），复制该哈希</span><span class="token comment"># 2. 切换到需要接收提交的分支</span><span class="token function">git</span> checkout <span class="token operator">&lt;</span>目标分支<span class="token operator">></span>  <span class="token comment"># 例如：git checkout main</span><span class="token comment"># 3. 执行cherry-pick，合并指定提交</span><span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>提交哈希<span class="token operator">></span>  <span class="token comment"># 例如：git cherry-pick a1b2c3d4</span><span class="token comment"># 4. 若出现冲突，解决后执行：</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>  <span class="token comment"># 标记冲突已解决</span><span class="token function">git</span> cherry-pick <span class="token parameter variable">--continue</span>  <span class="token comment"># 完成cherry-pick</span><span class="token comment"># 若放弃操作：git cherry-pick --abort</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>适用场景</strong>：修复 bug 后，需将修复提交同步到多个分支（如 main、test 分支）。</p><h2 id="安全的-cherry-pick-处理"><a href="#安全的-cherry-pick-处理" class="headerlink" title="安全的 cherry-pick 处理"></a>安全的 cherry-pick 处理</h2><p><code>cherry-pick</code> 本质是将其他提交的代码合并到当前分支，可能引入冲突或逻辑问题。</p><h3 id="一、操作前：进行备份"><a href="#一、操作前：进行备份" class="headerlink" title="一、操作前：进行备份"></a>一、操作前：进行备份</h3><p>在执行 <code>cherry-pick</code> 前，先为当前分支创建“备份”，确保即使操作出错也能回退到原始状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 查看当前分支状态，确保工作区干净（无未提交的修改）</span><span class="token function">git</span> status  <span class="token comment"># 若有未提交的修改，先 commit 或 stash 保存</span><span class="token comment"># 2. 为当前分支创建一个“备份分支”（命名清晰，如 backup/before-cherrypick）</span><span class="token function">git</span> branch backup/before-cherrypick<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，即使 <code>cherry-pick</code> 后代码混乱，也能通过 <code>git checkout backup/before-cherrypick</code> 回到操作前的状态。</p><h3 id="二、执行-cherry-pick-时：逐步验证"><a href="#二、执行-cherry-pick-时：逐步验证" class="headerlink" title="二、执行 cherry-pick 时：逐步验证"></a>二、执行 cherry-pick 时：逐步验证</h3><ol><li><strong>先查看目标提交的具体内容</strong>，确认是否真的需要合并：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看目标提交的修改内容（哈希值从目标分支的 git log 中获取）</span><span class="token function">git</span> show <span class="token operator">&lt;</span>提交哈希<span class="token operator">></span>  <span class="token comment"># 例如：git show a1b2c3d4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li><strong>执行 cherry-pick 并观察结果</strong>：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>提交哈希<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>若成功：终端会显示 <code>[当前分支 xxxxxxx]</code> 提示，直接进入步骤 3 验证。</li><li>若失败（出现冲突）：终端会提示 <code>error: could not apply xxxxxxx...</code>，此时进入“冲突处理”流程（见下文）。</li></ul><h3 id="三、操作后：验证代码正确性"><a href="#三、操作后：验证代码正确性" class="headerlink" title="三、操作后：验证代码正确性"></a>三、操作后：验证代码正确性</h3><p>无论是否出现冲突，<code>cherry-pick</code> 后都必须验证代码：</p><ol><li><strong>检查代码逻辑</strong>：打开被修改的文件，确认合并后的代码是否符合预期（比如没有多余的代码、条件判断是否正确）。</li><li><strong>本地测试</strong>：运行项目，测试相关功能是否正常（比如编译是否通过、接口是否能正常调用）。</li><li><strong>查看提交记录</strong>：确认 cherry-pick 生成的新提交是否正确：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log <span class="token parameter variable">--oneline</span> <span class="token parameter variable">-3</span>  <span class="token comment"># 查看最近3条提交记录</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="四、如果出问题：如何回退？"><a href="#四、如果出问题：如何回退？" class="headerlink" title="四、如果出问题：如何回退？"></a>四、如果出问题：如何回退？</h3><p>如果发现 <code>cherry-pick</code> 后的代码有问题，可根据不同阶段快速恢复：</p><h4 id="1-尚未解决冲突（处于-cherry-pick-过程中）"><a href="#1-尚未解决冲突（处于-cherry-pick-过程中）" class="headerlink" title="1. 尚未解决冲突（处于 cherry-pick 过程中）"></a>1. 尚未解决冲突（处于 cherry-pick 过程中）</h4><p>若 <code>cherry-pick</code> 时出现冲突，且你不想继续处理，可直接终止操作，回到执行前的状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> cherry-pick <span class="token parameter variable">--abort</span>  <span class="token comment"># 放弃当前 cherry-pick，恢复到操作前的状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-已完成-cherry-pick-但未推送到远程"><a href="#2-已完成-cherry-pick-但未推送到远程" class="headerlink" title="2. 已完成 cherry-pick 但未推送到远程"></a>2. 已完成 cherry-pick 但未推送到远程</h4><p>如果已完成 <code>cherry-pick</code> 并生成了新提交，但测试发现问题：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 撤销最近一次提交（即 cherry-pick 生成的提交），保留代码修改</span><span class="token function">git</span> reset <span class="token parameter variable">--soft</span> HEAD~1<span class="token comment"># 此时代码会回到 cherry-pick 后的状态，可手动修改或放弃：</span><span class="token comment"># 若想彻底放弃所有修改，回到备份分支的状态：</span><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> backup/before-cherrypick<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-已推送到远程"><a href="#3-已推送到远程" class="headerlink" title="3. 已推送到远程"></a>3. 已推送到远程</h4><p>如果已将 <code>cherry-pick</code> 的结果推送到远程，此时回退需要“撤销提交”并强制推送（需确保团队成员知晓，避免影响他人）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 本地撤销提交（生成一个新的“撤销提交”）</span><span class="token function">git</span> revert <span class="token operator">&lt;</span>cherry-pick生成的提交哈希<span class="token operator">></span><span class="token comment"># 2. 推送到远程，覆盖错误的提交</span><span class="token function">git</span> push origin <span class="token operator">&lt;</span>当前分支名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、更安全的方案：临时分支验证"><a href="#五、更安全的方案：临时分支验证" class="headerlink" title="五、更安全的方案：临时分支验证"></a>五、更安全的方案：临时分支验证</h3><p>如果对 <code>cherry-pick</code> 的代码完全不放心，可先在“临时分支”中验证，确认无误后再合并到目标分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 基于当前分支创建临时分支</span><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> temp/cherrypick-test<span class="token comment"># 2. 在临时分支中执行 cherry-pick</span><span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>提交哈希<span class="token operator">></span><span class="token comment"># 3. 在临时分支中测试代码，确认无误后</span><span class="token function">git</span> checkout <span class="token operator">&lt;</span>目标分支<span class="token operator">></span>  <span class="token comment"># 切回原分支</span><span class="token function">git</span> merge temp/cherrypick-test  <span class="token comment"># 将临时分支的修改合并过来</span><span class="token comment"># 4. 验证后删除临时分支</span><span class="token function">git</span> branch <span class="token parameter variable">-d</span> temp/cherrypick-test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="六、冲突处理"><a href="#六、冲突处理" class="headerlink" title="六、冲突处理"></a>六、冲突处理</h1><p>当多人修改同一文件的同一部分，或合并分支&#x2F;拉取代码时，可能出现冲突。</p><h2 id="1-冲突表现"><a href="#1-冲突表现" class="headerlink" title="1. 冲突表现"></a>1. 冲突表现</h2><p>执行 <code>git pull</code> 或 <code>git merge</code> 后，终端提示 <code>Automatic merge failed; fix conflicts and then commit the result.</code></p><h2 id="2-解决步骤"><a href="#2-解决步骤" class="headerlink" title="2. 解决步骤"></a>2. 解决步骤</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 查看冲突文件（终端会显示哪些文件冲突）</span><span class="token function">git</span> status  <span class="token comment"># 冲突文件会标记为 "both modified"</span><span class="token comment"># 2. 打开冲突文件，寻找冲突标记并修改</span><span class="token comment"># 文件中冲突部分会被标记：</span><span class="token comment"># &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD（当前分支的代码）</span><span class="token comment"># 你的代码</span><span class="token comment"># =======</span><span class="token comment"># 对方的代码</span><span class="token comment"># >>>>>>> 分支名/提交哈希（合并过来的代码）</span><span class="token comment"># 3. 手动编辑文件，保留正确代码，删除冲突标记（&lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, >>>>>>>）</span><span class="token comment"># 4. 标记冲突已解决</span><span class="token function">git</span> <span class="token function">add</span> <span class="token operator">&lt;</span>冲突文件名<span class="token operator">></span>  <span class="token comment"># 或 git add .（所有文件）</span><span class="token comment"># 5. 完成合并提交（merge冲突时需要）</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"解决合并冲突：保留xxx逻辑"</span><span class="token comment"># （若为pull冲突，此步可省略，pull会自动提交）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>少量冲突可以使用 <code>vim</code> 快速处理，大量冲突可以使用 <code>vscode</code> 更直观方便地处理</p><h1 id="七、其他常用操作"><a href="#七、其他常用操作" class="headerlink" title="七、其他常用操作"></a>七、其他常用操作</h1><h2 id="1-撤销操作"><a href="#1-撤销操作" class="headerlink" title="1. 撤销操作"></a>1. 撤销操作</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 撤销工作区修改（未git add的文件）</span><span class="token function">git</span> checkout -- <span class="token operator">&lt;</span>文件名<span class="token operator">></span>  <span class="token comment"># 慎用！会丢失未提交的修改</span><span class="token comment"># 撤销暂存区修改（已git add但未commit）</span><span class="token function">git</span> reset HEAD <span class="token operator">&lt;</span>文件名<span class="token operator">></span>  <span class="token comment"># 回到工作区</span><span class="token comment"># 撤销本地提交（保留修改，回到暂存区）</span><span class="token function">git</span> reset <span class="token parameter variable">--soft</span> HEAD~1  <span class="token comment"># HEAD~1表示撤销最近1次提交，~2撤销2次</span><span class="token comment"># 彻底撤销本地提交（丢弃修改，谨慎使用！）</span><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD~1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-查看提交记录"><a href="#2-查看提交记录" class="headerlink" title="2. 查看提交记录"></a>2. 查看提交记录</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 简洁查看提交历史（一行一条）</span><span class="token function">git</span> log <span class="token parameter variable">--oneline</span><span class="token comment"># 查看分支合并图（直观展示分支关系）</span><span class="token function">git</span> log <span class="token parameter variable">--graph</span> <span class="token parameter variable">--oneline</span> <span class="token parameter variable">--all</span><span class="token comment"># 查看某个文件的修改历史</span><span class="token function">git</span> log <span class="token operator">&lt;</span>文件名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-暂存工作区（stash）"><a href="#3-暂存工作区（stash）" class="headerlink" title="3. 暂存工作区（stash）"></a>3. 暂存工作区（stash）</h2><p>用于临时保存工作区修改，切换分支时不提交代码。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 暂存当前工作区修改</span><span class="token function">git</span> stash<span class="token comment"># 查看所有暂存记录</span><span class="token function">git</span> stash list<span class="token comment"># 恢复最近的暂存记录（并删除暂存）</span><span class="token function">git</span> stash pop<span class="token comment"># 恢复指定暂存记录（stash@&#123;n&#125;为记录编号，从0开始）</span><span class="token function">git</span> stash apply stash@<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="八、操作流程示例（日常开发）"><a href="#八、操作流程示例（日常开发）" class="headerlink" title="八、操作流程示例（日常开发）"></a>八、操作流程示例（日常开发）</h1><ol><li>克隆仓库：<code>git clone &lt;远程地址&gt;</code></li><li>创建新分支开发：<code>git checkout -b feature/new功能</code></li><li>开发中定期提交：<code>git add .</code> → <code>git commit -m &quot;xxx&quot;</code></li><li>开发完成后拉取远程最新代码：<code>git pull origin main</code>（解决冲突）</li><li>推送本地分支到远程：<code>git push -u origin feature/new功能</code></li><li>（可选）合并到主分支：切换到 main → <code>git merge feature/new功能</code> → <code>git push</code></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针赋值分析</title>
      <link href="/2025/09/21/%E6%8C%87%E9%92%88%E8%B5%8B%E5%80%BC%E5%88%86%E6%9E%90/"/>
      <url>/2025/09/21/%E6%8C%87%E9%92%88%E8%B5%8B%E5%80%BC%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="现象描述"><a href="#现象描述" class="headerlink" title="现象描述"></a>现象描述</h1><p>链表中常用指针进行操作：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ListNode *slow<span class="token operator">=</span> <span class="token function">head</span><span class="token punctuation">;</span>ListNode *pre <span class="token operator">=</span> NULL<span class="token punctuation">;</span>pre <span class="token operator">=</span> slow<span class="token punctuation">;</span>slow <span class="token operator">=</span> slow-<span class="token operator">></span>next<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此时 <code>pre</code> 指向的仍然是 <code>slow</code> 第一次指向的地址，即 <code>head</code></p><h2 id="指针赋值给指针"><a href="#指针赋值给指针" class="headerlink" title="指针赋值给指针"></a><strong>指针赋值给指针</strong></h2><p>指针变量存储的是内存地址，当执行 <code>pre = slow</code> 时，是将 <code>slow</code> 当时指向的内存地址复制给了 <code>pre</code>。这意味着：</p><ol><li><code>pre</code> 和 <code>slow</code> 一开始指向<strong>同一个内存地址</strong>（同一个节点）</li><li>当执行 <code>slow = slow-&gt;next</code> 时，只是改变了 <code>slow</code> 存储的地址（让它指向了下一个节点）</li><li>但 <code>pre</code> 中存储的地址<strong>没有被改变</strong>，仍然是 <code>slow</code> 原来指向的那个节点的地址</li></ol><h3 id="从地址和值的角度分析"><a href="#从地址和值的角度分析" class="headerlink" title="从地址和值的角度分析"></a><strong>从地址和值的角度分析</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">head: 地址0x100节点1: 地址0x200节点2: 地址0x300节点3: 地址0x400<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>执行 <code>pre = slow</code> 之前<br>假设此时：</p><ul><li><code>slow</code> 存储的地址是 <code>0x100</code>（指向 vhead）</li><li><code>pre</code> 尚未赋值（或存储其他地址）</li></ul></li><li><p>执行 <code>pre = slow</code> 时</p><ul><li>这是<strong>地址的复制</strong>：把 <code>slow</code> 中存储的地址（<code>0x100</code>）复制到 <code>pre</code> 中</li><li>执行后：<ul><li><code>slow</code> 的值（地址）：<code>0x100</code>（不变）</li><li><code>pre</code> 的值（地址）：<code>0x100</code>（和 slow 相同）</li><li>两者指向<strong>同一个内存地址</strong>（head）</li></ul></li></ul></li><li><p>执行 <code>slow = slow-&gt;next</code> 时</p><ul><li><code>slow-&gt;next</code> 是 <code>slow</code> 指向节点（head）的 <code>next</code> 成员，假设是 <code>0x200</code>（节点 1 的地址）</li><li>这是<strong>修改 slow 自身存储的地址</strong>：把 <code>0x200</code> 存入 <code>slow</code></li><li>执行后：<ul><li><code>slow</code> 的值（地址）：<code>0x200</code>（现在指向节点 1）</li><li><code>pre</code> 的值（地址）：<code>0x100</code>（仍然指向 head，不受 slow 变化影响）</li></ul></li></ul></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>指针变量（<code>pre</code>&#x2F;<code>slow</code>）存储的是<strong>地址</strong></li><li><code>pre = slow</code> 是<strong>地址的复制</strong>，之后两者的地址值<strong>独立</strong></li><li>当 <code>slow</code> 被赋值新地址（<code>slow = slow-&gt;next</code>）时，只是改变了 <code>slow</code> 自己存储的地址，<code>pre</code> 中复制的旧地址不会同步变化</li></ul><p>就像你抄了同学的家庭住址（<code>pre = slow</code>），后来同学搬家了（<code>slow</code> 变了），但你抄的旧地址（<code>pre</code>）不会自动变成新地址。</p><h1 id="进一步分析"><a href="#进一步分析" class="headerlink" title="进一步分析"></a>进一步分析</h1><p><strong>指针赋值的本质：复制门牌号</strong></p><p>当执行 <code>指针A = 指针B</code> 时，本质是<strong>把指针 B 上的门牌号抄写到指针 A 上</strong>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">// 假设a的地址是0x100</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>   <span class="token comment">// p上写着0x100（指向a）</span><span class="token keyword">int</span><span class="token operator">*</span> q<span class="token punctuation">;</span>        <span class="token comment">// q是一张空白标签</span>q <span class="token operator">=</span> p<span class="token punctuation">;</span>         <span class="token comment">// 把p上的门牌号（0x100）抄到q上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行后：</p><ul><li><code>p</code> 和 <code>q</code> 上的门牌号完全相同（都是 0x100）</li><li>它们指向同一块内存（变量 a）</li><li>但 <code>p</code> 和 <code>q</code> 是两张独立的标签，各自保存着门牌号</li></ul><p><strong>两种不同的修改操作</strong></p><ol><li>修改标签上的门牌号（指针本身）</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token comment">// 假设b的地址是0x200</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>        <span class="token comment">// 把p上的门牌号改成0x200（现在p指向b）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时 <code>q</code> 上的门牌号还是 0x100（仍然指向 a），因为我们只改了 <code>p</code> 这张标签。</p><ol><li>修改门牌号对应的房间内容（指向的变量）</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">*</span>q <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>       <span class="token comment">// 找到q上的门牌号（0x100），把里面的内容改成30</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时通过 <code>p</code> 访问（如果 p 还指向 0x100 的话）也会得到 30，因为房间里的内容变了。</p><p><strong>总结表格</strong></p><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p>将指针 1 赋值给指针 2，本质是「地址的一次性复制」—— 复制完成后，指针 1 和指针 2 就变成了两个独立存储地址的变量，后续指针 1 的任何改变（无论是指向新地址，还是通过它修改指向变量的值），都不会主动影响指针 2 本身存储的地址值。</p>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寄存器操作</title>
      <link href="/2025/09/20/%E5%AF%84%E5%AD%98%E5%99%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2025/09/20/%E5%AF%84%E5%AD%98%E5%99%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="位操作"><a href="#位操作" class="headerlink" title="位操作"></a>位操作</h1><h2 id="清零"><a href="#清零" class="headerlink" title="清零"></a>清零</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//假设为第三位</span><span class="token keyword">int</span> val <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//假设为第三、四位</span><span class="token keyword">int</span> val <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="置一"><a href="#置一" class="headerlink" title="置一"></a>置一</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> val <span class="token operator">|=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> val <span class="token operator">^=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 异或操作：0变1，1变0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">readl</span><span class="token punctuation">(</span>GPIO1_DR<span class="token punctuation">)</span><span class="token punctuation">;</span>val <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token operator">>></span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0x01</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="对寄存器读写数据"><a href="#对寄存器读写数据" class="headerlink" title="对寄存器读写数据"></a>对寄存器读写数据</h1><p><strong>在修改寄存器数据时，如果是对位进行操作（其他位用于其他功能），则必须要进行先读后修改</strong></p><p>否则会影响其他位</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/io.h></span></span><span class="token keyword">void</span> <span class="token function">writel</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> data <span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> addr<span class="token punctuation">)</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token function">readl</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> addr<span class="token punctuation">)</span><span class="token comment">//e.g.</span><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token function">readl</span><span class="token punctuation">(</span>GPIO1_DR<span class="token punctuation">)</span><span class="token punctuation">;</span>val <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">writel</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span>GPIO1_DR<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="内存映射"><a href="#内存映射" class="headerlink" title="内存映射"></a>内存映射</h1><p>从芯片手册得到的是物理地址，需要内存映射为虚拟地址后才能使用</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* --------------------------------- CCM寄存器 --------------------------------- */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CCM_CCGR1_BASE</span>                        <span class="token expression"><span class="token number">0x20C406C</span></span></span><span class="token comment">/* ------------------------------- IO复用控制寄存器 ----------------------------- */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03_BASE</span> <span class="token expression"><span class="token number">0x20E0068</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_BASE</span> <span class="token expression"><span class="token number">0x20E02F4</span></span></span><span class="token comment">/* --------------------------------- GPIO寄存器 -------------------------------- */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GPIO1_DR_BASE</span>                         <span class="token expression"><span class="token number">0x209C000</span> </span><span class="token comment">// 写</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GPIO1_GDIR_BASE</span>                       <span class="token expression"><span class="token number">0x209C004</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GPIO1_PSR_BASE</span>                        <span class="token expression"><span class="token number">0x209C008</span> </span><span class="token comment">// 读</span></span><span class="token comment">/* ------------------ 内存映射后的虚拟地址指针(入口函数中进行内存映射) --------------- */</span><span class="token keyword">static</span> <span class="token keyword">void</span> __iomem <span class="token operator">*</span>CCM_CCGR1<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> __iomem <span class="token operator">*</span>MUX_CTL_PAD_GPIO1_IO03<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> __iomem <span class="token operator">*</span>PAD_CTL_PAD_GPIO1_IO03<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> __iomem <span class="token operator">*</span>GPIO1_DR<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> __iomem <span class="token operator">*</span>GPIO1_GDIR<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> __iomem <span class="token operator">*</span>GPIO1_PSR<span class="token punctuation">;</span><span class="token function">chr_dev_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//...</span>            <span class="token comment">/* ---------------------------------- 内存映射 --------------------------------- */</span>    CCM_CCGR1 <span class="token operator">=</span> <span class="token function">ioremap</span><span class="token punctuation">(</span>CCM_CCGR1_BASE<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MUX_CTL_PAD_GPIO1_IO03 <span class="token operator">=</span> <span class="token function">ioremap</span><span class="token punctuation">(</span>IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03_BASE<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PAD_CTL_PAD_GPIO1_IO03 <span class="token operator">=</span> <span class="token function">ioremap</span><span class="token punctuation">(</span>IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_BASE<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    GPIO1_DR <span class="token operator">=</span> <span class="token function">ioremap</span><span class="token punctuation">(</span>GPIO1_DR_BASE<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    GPIO1_GDIR <span class="token operator">=</span> <span class="token function">ioremap</span><span class="token punctuation">(</span>GPIO1_GDIR_BASE<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    GPIO1_PSR <span class="token operator">=</span> <span class="token function">ioremap</span><span class="token punctuation">(</span>GPIO1_PSR_BASE<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token function">chr_dev_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//...</span>            <span class="token comment">/* --------------------------------- 取消内存映射 -------------------------------- */</span>    <span class="token function">iounmap</span><span class="token punctuation">(</span>CCM_CCGR1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">iounmap</span><span class="token punctuation">(</span>MUX_CTL_PAD_GPIO1_IO03<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">iounmap</span><span class="token punctuation">(</span>PAD_CTL_PAD_GPIO1_IO03<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">iounmap</span><span class="token punctuation">(</span>GPIO1_DR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">iounmap</span><span class="token punctuation">(</span>GPIO1_GDIR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">iounmap</span><span class="token punctuation">(</span>GPIO1_PSR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆</title>
      <link href="/2025/09/19/%E5%A0%86/"/>
      <url>/2025/09/19/%E5%A0%86/</url>
      
        <content type="html"><![CDATA[<h1 id="一、堆是完全二叉树的结构"><a href="#一、堆是完全二叉树的结构" class="headerlink" title="一、堆是完全二叉树的结构"></a>一、堆是完全二叉树的结构</h1><p>1.只允许最后一行不满</p><p>2.最后一行必须从左往右排，中间不能有间隔</p><h1 id="二、堆序性"><a href="#二、堆序性" class="headerlink" title="二、堆序性"></a>二、堆序性</h1><p>1.小根堆，父节点都要更小</p><p>2.大根堆，父节点都要更大</p><h1 id="三、堆的存储"><a href="#三、堆的存储" class="headerlink" title="三、堆的存储"></a>三、堆的存储</h1><p>因为是完全二叉树，所以可以根据层序遍历，来得到一个数组，此时，父节点为 i 时，左右子节点一定为 2i+1&#x2F;2</p><h1 id="四、堆有两个基本操作"><a href="#四、堆有两个基本操作" class="headerlink" title="四、堆有两个基本操作"></a>四、堆有两个基本操作</h1><ol><li>上滤，通常用于插入新元素到根中时，向上调整位置时</li><li>下滤（因为必须要满足堆序性的话，所以对不满足的要操作），把根节点向下调整的操作叫下滤</li></ol><h1 id="五、自顶向下建堆法"><a href="#五、自顶向下建堆法" class="headerlink" title="五、自顶向下建堆法"></a>五、自顶向下建堆法</h1><ol><li>插入堆</li><li>上滤</li></ol><h1 id="六、自下而上建堆法"><a href="#六、自下而上建堆法" class="headerlink" title="六、自下而上建堆法"></a>六、自下而上建堆法</h1><p>对每个父节点进行下滤（从最下面的父节点开始）– 复杂度 O(N)</p><h1 id="七、应用"><a href="#七、应用" class="headerlink" title="七、应用"></a>七、应用</h1><ol><li>优先队列：弹出最小元素 – 可以用来实现堆排序，用大根堆排序完，弹出的是正序，小根堆反序</li><li>插入：就是上滤</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2025/09/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2025/09/19/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/XjQ3bxc9zorAfnxE5PrcUbU8nNd.png"></p><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>外循环–，内循环 ++（从后往前排好）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DATA_SIZE</span> <span class="token expression"><span class="token number">15</span></span></span><span class="token keyword">int</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    bool swap_flag <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// NOTE:NUN个数要比较NUM-1次，//后面先排好 </span>        swap_flag <span class="token operator">=</span> false<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// NOTE:大的数放到后面，小的数放到前面，i之后的已经排好，i之前的需要排序</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                temp <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                swap_flag <span class="token operator">=</span> true<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>swap_flag <span class="token operator">==</span> false<span class="token punctuation">)</span> <span class="token comment">//加入标志位，若已无需再排序，则直接结束排序</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">[</span>DATA_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">345</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">bubble_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> DATA_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> DATA_SIZE<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>双循环都是 ++（从前往后排好）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DATA_SIZE</span> <span class="token expression"><span class="token number">15</span></span></span><span class="token keyword">int</span> <span class="token function">select_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>data<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//前面先排好</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                temp <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">[</span>DATA_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">345</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">select_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> DATA_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> DATA_SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p>外循环–，内循环 ++</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DATA_SIZE</span> <span class="token expression"><span class="token number">15</span></span></span><span class="token keyword">int</span> <span class="token function">insert_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 从左到右遍历，第一个位置不用动</span>        temp <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//不可省</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 从前面已经排好的数组的最后一位开始向前比较</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> temp<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//整体后移</span>        <span class="token punctuation">&#125;</span>        data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token comment">//插入</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">[</span>DATA_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">345</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">insert_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> DATA_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> DATA_SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p>先分组，后排序</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DATA_SIZE</span> <span class="token expression"><span class="token number">15</span></span></span><span class="token keyword">int</span> <span class="token function">group_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> step<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> pos <span class="token operator">+</span> step<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> step<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        temp <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> step<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">=</span>j<span class="token operator">-</span>step<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> temp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                data<span class="token punctuation">[</span>j <span class="token operator">+</span> step<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//逐步后移</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        data<span class="token punctuation">[</span>j <span class="token operator">+</span> step<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">shell_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> step<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>step <span class="token operator">=</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> step <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> step <span class="token operator">=</span> step <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 分组,最后一次必定为1</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> step<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token comment">// 对每一组</span>            <span class="token function">group_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> len<span class="token punctuation">,</span> i<span class="token punctuation">,</span> step<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">[</span>DATA_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">345</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">shell_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> DATA_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> DATA_SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DATA_SIZE</span> <span class="token expression"><span class="token number">15</span></span></span><span class="token keyword">int</span> temp<span class="token punctuation">[</span>DATA_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span>        temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span>        temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//易错</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>r<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> l<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">[</span>DATA_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">345</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> DATA_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> DATA_SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><ol><li>取 data[0]作为基准</li><li>扫描数列，将比基准数小的元素全部放到它的左边，大于或等于基准数的元素全部放到它的右边，得到左右两个区间。</li><li>再对左右区间重复第二步，直到各区间少于两个元素。（右边找到并排序后换到左边，左右交替）</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DATA_SIZE</span> <span class="token expression"><span class="token number">15</span></span></span><span class="token keyword">int</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>    temp <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    right <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">></span> left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&lt;</span> temp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 把右边比轴小的移到轴左边</span>                data<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 换边</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 把左边比轴大的移到轴右边</span>                data<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 换边</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    data<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">// 对左边操作</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>data <span class="token operator">+</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> len <span class="token operator">-</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对右边操作</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">[</span>DATA_SIZE<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">345</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">quick_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> DATA_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> DATA_SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>选取<strong>中间值作为参考</strong></p><blockquote><p>仅有开头一个等号</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>data<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>r<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">//不可省</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token comment">//不可省</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> data<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//不可省</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">do</span><span class="token punctuation">&#123;</span>                <span class="token comment">//不可省</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">do</span><span class="token punctuation">&#123;</span>                <span class="token comment">//不可省</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span>                <span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">func</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>l<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">func</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>堆排序就像整理一堆书：</p><ol><li><strong>建堆</strong>：先把所有书按照 “大的放上面” 的规则叠成一堆（构建最大堆）</li><li><strong>取最大</strong>：每次从最上面拿走最大的书，放到书架的最后一格</li><li><strong>重新整理</strong>：把剩下的书重新叠好，保持 “大的放上面” 的规则</li><li><strong>重复</strong>：不断重复取最大和重新整理的步骤，直到所有书都按顺序排好</li></ol><p>堆排序的特点是稳定可靠（相等元素不会乱序），时间复杂度始终是 O (n log n)，但实际运行速度通常比快排稍慢。</p><h2 id="重要结论"><a href="#重要结论" class="headerlink" title="重要结论"></a>重要结论</h2><p>最后一个非叶子节点：</p><p>$$<br>i &#x3D; \left( \frac{n}{2} \right)-1<br>$$</p><p>当前节点 <code>i</code> 的左孩子节点：</p><p>$$<br>left &#x3D; 2*i+1<br>$$</p><p>当前节点 <code>i</code> 的右孩子节点：</p><p>$$<br>right &#x3D; 2*i+2<br>$$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token comment">// 调整堆，使以i为根的子树成为最大堆</span><span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> largest <span class="token operator">=</span> i<span class="token punctuation">;</span>         <span class="token comment">// 初始化最大值为根节点</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 左子节点索引</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment">// 右子节点索引</span>        <span class="token comment">// 如果左子节点存在且大于根节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span>        largest <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token comment">// 如果右子节点存在且大于当前最大值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span>        largest <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token comment">// 如果最大值不是根节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>largest <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 交换根节点和最大值节点</span>                <span class="token comment">// 递归调整受影响的子树</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> largest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 堆排序主函数</span><span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1. 构建最大堆（从最后一个非叶子节点开始）</span>    <span class="token comment">// 最后一个非叶子节点的索引 = (n/2) - 1</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 2. 逐个提取堆顶元素（最大值）并调整堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 将当前堆顶（最大值）与数组末尾元素交换</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 对剩余元素重新堆化（堆大小减1）</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 辅助函数：打印数组</span><span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> arr<span class="token punctuation">)</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 测试</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"原始数组: "</span><span class="token punctuation">;</span>    <span class="token function">printArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">heapSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"排序后数组: "</span><span class="token punctuation">;</span>    <span class="token function">printArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="堆排和快排分析"><a href="#堆排和快排分析" class="headerlink" title="堆排和快排分析"></a>堆排和快排分析</h1><h2 id="为什么堆排序是稳定的？"><a href="#为什么堆排序是稳定的？" class="headerlink" title="为什么堆排序是稳定的？"></a>为什么堆排序是稳定的？</h2><p>堆排序的稳定性源于其操作特性：</p><ol><li>堆排序通过<strong>比较和交换操作来排序，当元素值相等时，不会改变它们的相对顺序</strong></li><li>在堆的调整过程中，相等元素的父节点和子节点关系保持不变</li><li><strong>每次提取堆顶元素后，只与末尾元素交换，不影响其他相等元素的相对位置</strong></li></ol><h2 id="为什么快排是不稳定的？"><a href="#为什么快排是不稳定的？" class="headerlink" title="为什么快排是不稳定的？"></a>为什么快排是不稳定的？</h2><p>快速排序的不稳定性主要由以下原因造成：</p><ol><li>基准元素的选择和交换可能会破坏相等元素的相对顺序</li><li><strong>分区过程中，相等元素可能被分到基准元素的两侧</strong></li><li>例如：数组 [3, 2, 2]，如果选择第一个 3 作为基准，经过一次分区后可能变成 [2, 2, 3]，虽然结果正确，但如果原来的两个 2 有其他关联信息，它们的相对位置可能改变</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMake</title>
      <link href="/2025/09/18/CMake/"/>
      <url>/2025/09/18/CMake/</url>
      
        <content type="html"><![CDATA[<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>用 <code>#</code></p><h2 id="已有宏"><a href="#已有宏" class="headerlink" title="已有宏"></a>已有宏</h2><h3 id="PROJECT-SOURCE-DIR"><a href="#PROJECT-SOURCE-DIR" class="headerlink" title="PROJECT_SOURCE_DIR"></a>PROJECT_SOURCE_DIR</h3><p>使用 cmake 命令后紧跟的目录，一般是工程的根目录</p><h3 id="CMAKE-CURRENT-SOURCE-DIR"><a href="#CMAKE-CURRENT-SOURCE-DIR" class="headerlink" title="CMAKE_CURRENT_SOURCE_DIR"></a>CMAKE_CURRENT_SOURCE_DIR</h3><p>当前处理的 CMakeLists.txt 所在的路径</p><h3 id="EXECUTABLE-OUTPUT-PATH"><a href="#EXECUTABLE-OUTPUT-PATH" class="headerlink" title="EXECUTABLE_OUTPUT_PATH"></a>EXECUTABLE_OUTPUT_PATH</h3><p>用来指定生成文件路径，如果不存在该路径则会创建</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">EXECUTABLE_OUTPUT_PATH</span> <span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><h3 id="aux-source-directory"><a href="#aux-source-directory" class="headerlink" title="aux_source_directory"></a>aux_source_directory</h3><p>查找某个路径下的所有源文件</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">aux_source_directory</span><span class="token punctuation">(</span>&lt; dir <span class="token punctuation">></span> &lt; variable <span class="token punctuation">></span><span class="token punctuation">)</span><span class="token keyword">aux_source_directory</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_CURRENT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/src SRC_LIST<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>dir</code>：要搜索的目录<br><code>variable</code>：将从 dir 目录下搜索到的源文件列表存储到该变量中</p><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">file</span><span class="token punctuation">(</span>GLOB/GLOB_RECURSE 变量名 要搜索的文件路径和文件类型<span class="token punctuation">)</span><span class="token keyword">file</span><span class="token punctuation">(</span>GLOB MAIN_SRC <span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_CURRENT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/src/*.cpp<span class="token punctuation">)</span><span class="token keyword">file</span><span class="token punctuation">(</span>GLOB MAIN_HEAD <span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_CURRENT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/include/*.h<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>GLOB</code>: 将指定目录下搜索到的满足条件的所有文件名生成一个列表，并将其存储到变量中。<br><code>GLOB_RECURSE</code>：递归搜索指定目录，将搜索到的满足条件的文件名生成一个列表，并将其存储到变量中。<strong>(可选)</strong></p><h2 id="指定头文件路径"><a href="#指定头文件路径" class="headerlink" title="指定头文件路径"></a>指定头文件路径</h2><p>保证在编译过程中编译器能够找到这些头文件，并顺利通过编译。</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">include_directories</span><span class="token punctuation">(</span>headpath<span class="token punctuation">)</span><span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/include<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="生成可执行文件"><a href="#生成可执行文件" class="headerlink" title="生成可执行文件"></a>生成可执行文件</h1><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.15</span><span class="token punctuation">)</span><span class="token keyword">project</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span> <span class="token comment">#cmake项目名</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">EXECUTABLE_OUTPUT_PATH</span> <span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/output<span class="token punctuation">)</span> <span class="token comment">#输出路径</span><span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/inc<span class="token punctuation">)</span> <span class="token comment">#头文件</span><span class="token keyword">aux_source_directory</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/src SRC<span class="token punctuation">)</span> <span class="token comment">#源文件</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>app <span class="token punctuation">$&#123;</span>SRC<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">#前者为生成的可执行文件名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="生成库文件"><a href="#生成库文件" class="headerlink" title="生成库文件"></a>生成库文件</h1><h2 id="静态库和动态库"><a href="#静态库和动态库" class="headerlink" title="静态库和动态库"></a>静态库和动态库</h2><ul><li>静态库在编译时将所有依赖的库代码直接链接到可执行文件中，使得程序独立性高但体积较大。</li><li>动态库在运行时加载，允许程序共享库代码，有助于减小程序体积和节省系统资源，但需要确保运行环境中存在正确的库版本。</li></ul><h3 id="更新与维护"><a href="#更新与维护" class="headerlink" title="更新与维护"></a>更新与维护</h3><ul><li><p><strong>静态库</strong>：</p><ul><li>更新静态库后，所有使用该库的应用都需要重新编译和链接，以便包含新的库代码。</li></ul></li><li><p><strong>动态库</strong>：</p><ul><li>动态库可以在不重新编译应用的情况下进行更新，只要库的接口没有改变。这对于发布补丁或性能优化非常有用。</li></ul></li></ul><h1 id="生成步骤"><a href="#生成步骤" class="headerlink" title="生成步骤"></a>生成步骤</h1><p>首先把 main.c 剔除出 src 文件夹，不让其包含在库中</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.15</span><span class="token punctuation">)</span><span class="token keyword">project</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">LIBRARY_OUTPUT_PATH</span> <span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/lib<span class="token punctuation">)</span> <span class="token comment">#库文件存放路径（不存在则创建）</span><span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/inc<span class="token punctuation">)</span><span class="token keyword">aux_source_directory</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/src SRC<span class="token punctuation">)</span><span class="token keyword">add_library</span><span class="token punctuation">(</span>test <span class="token namespace">SHARED</span> <span class="token punctuation">$&#123;</span>SRC<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">#生成动态库 库文件将被命名为libtest.so</span><span class="token comment">#add_library(test STATIC $&#123;SRC&#125;) #生成静态库（默认）库文件将被命名为libtest.a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="链接库文件"><a href="#链接库文件" class="headerlink" title="链接库文件"></a>链接库文件</h1><h2 id="链接静态库"><a href="#链接静态库" class="headerlink" title="链接静态库"></a>链接静态库</h2><p><code>target_link_libraries</code> 和 <code>link_libraries</code> 均可<br>前者更好</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.15</span><span class="token punctuation">)</span><span class="token keyword">project</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">EXECUTABLE_OUTPUT_PATH</span> <span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/output<span class="token punctuation">)</span><span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/inc<span class="token punctuation">)</span><span class="token keyword">aux_source_directory</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span> SRC<span class="token punctuation">)</span> <span class="token comment">#除库文件以外的源文件（包括mian.c）</span><span class="token comment">#link_libraries(test) </span><span class="token comment">#库的名字（可以只写中间部分，也可以全名）</span><span class="token keyword">link_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/lib<span class="token punctuation">)</span> <span class="token comment">#自定义库的路径</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>app <span class="token punctuation">$&#123;</span>SRC<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>app test<span class="token punctuation">)</span><span class="token comment">#要放在最后</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链接动态库"><a href="#链接动态库" class="headerlink" title="链接动态库"></a>链接动态库</h2><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">EXECUTABLE_OUTPUT_PATH</span> <span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/output<span class="token punctuation">)</span><span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/inc<span class="token punctuation">)</span><span class="token keyword">aux_source_directory</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span> SRC<span class="token punctuation">)</span><span class="token keyword">link_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/lib<span class="token punctuation">)</span> <span class="token comment">#要在add_...之前</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>app <span class="token punctuation">$&#123;</span>SRC<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>app test pthread<span class="token punctuation">)</span><span class="token comment">#要放在最后</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链接多个库"><a href="#链接多个库" class="headerlink" title="链接多个库"></a>链接多个库</h2><p>如果多个库之间存在依赖关系，确保按照正确的顺序列出库名称。通常，被依赖的库应该放在后面</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.15</span><span class="token punctuation">)</span><span class="token keyword">project</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">EXECUTABLE_OUTPUT_PATH</span> <span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/output<span class="token punctuation">)</span><span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/inc<span class="token punctuation">)</span><span class="token keyword">aux_source_directory</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span> SRC<span class="token punctuation">)</span><span class="token comment"># 自定义库的路径</span><span class="token keyword">link_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/lib<span class="token punctuation">)</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>app <span class="token punctuation">$&#123;</span>SRC<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 链接多个静态库</span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>app    lib1  <span class="token comment"># 第一个库的名字</span>    lib2  <span class="token comment"># 依赖lib3</span>    lib3  <span class="token comment"># 被lib2依赖</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="静态库动态库混合"><a href="#静态库动态库混合" class="headerlink" title="静态库动态库混合"></a>静态库动态库混合</h2><p>如果同时需要链接动态库和静态库，同样可以在 <code>target_link_libraries</code> 中一并列出。</p><h2 id="有多个库路径"><a href="#有多个库路径" class="headerlink" title="有多个库路径"></a>有多个库路径</h2><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">link_directories</span><span class="token punctuation">(</span>    <span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/lib1    <span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/lib2    <span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/lib3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="寻找加载库文件"><a href="#寻找加载库文件" class="headerlink" title="寻找加载库文件"></a>寻找加载库文件</h2><p><code>find_library</code><br>第一个参数：找到的库文件的路径<br>第二个参数：库文件名<br>第三个参数：固定为 <code>PATHS</code><br>第 4 - …个参数：查找的路径</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">find_library</span><span class="token punctuation">(</span>TEST_LIB test PATHS        <span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/libs         /usr/local/lib<span class="token punctuation">)</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>app main.c<span class="token punctuation">)</span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>app <span class="token punctuation">$&#123;</span>TEST_LIB<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="消息通知"><a href="#消息通知" class="headerlink" title="消息通知"></a>消息通知</h1><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">message</span><span class="token punctuation">(</span>[STATUS|WARNING|AUTHOR_WARNING|FATAL_ERROR|SEND_ERROR] <span class="token string">"message to display"</span> ...<span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span>STATUS <span class="token string">"check1"</span><span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span>FATAL_ERROR <span class="token string">"error"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>打印如下</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">test</span>-- check1CMake Error at CMakeLists.txt:29 <span class="token punctuation">(</span>message<span class="token punctuation">)</span>:  error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>(无) </code>：重要消息<br><code>STATUS</code> ：非重要消息<br><code>WARNING</code>：CMake 警告, 会继续执行<br><code>AUTHOR_WARNING</code>：CMake 警告 (dev), 会继续执行<br><code>SEND_ERROR</code>：CMake 错误, 继续执行，但是会跳过生成的步骤<br><code>FATAL_ERROR</code>：CMake 错误, 终止所有处理过程</p><h1 id="添加宏"><a href="#添加宏" class="headerlink" title="添加宏"></a>添加宏</h1><p>C&#x2F;C++ 中未赋值的宏默认为 <code>1</code></p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">add_definitions</span><span class="token punctuation">(</span>-D宏名称<span class="token punctuation">)</span><span class="token keyword">add_definitions</span><span class="token punctuation">(</span>-DMY_MACRO=<span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">add_definitions</span><span class="token punctuation">(</span>-DDEBUG<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="项目中-cmake"><a href="#项目中-cmake" class="headerlink" title="项目中 cmake"></a>项目中 cmake</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">project_name/├── src/                <span class="token comment"># 存放源代码文件</span>│   ├── CMakeLists.txt  <span class="token comment"># 构建脚本</span>│   ├── main.c          <span class="token comment"># 主程序入口</span>│   ├── module1.c       <span class="token comment"># 模块1的实现</span>│   ├── module2.c       <span class="token comment"># 模块2的实现</span>│   └── utils.c         <span class="token comment"># 工具函数实现</span>├── include/            <span class="token comment"># 存放头文件（.h）</span>│   ├── module1.h       <span class="token comment"># 模块1的声明</span>│   ├── module2.h       <span class="token comment"># 模块2的声明</span>│   └── utils.h         <span class="token comment"># 工具函数声明</span>├── lib/                <span class="token comment"># 存放第三方库或静态库文件</span>│   ├── libxyz.a        <span class="token comment"># 静态库文件</span>│   └── xyz.h           <span class="token comment"># 第三方库头文件</span>├── tests/              <span class="token comment"># 存放测试代码</span>│   ├── CMakeLists.txt  <span class="token comment"># 构建脚本</span>│   ├── test_module1.c  <span class="token comment"># 测试模块1</span>│   └── test_utils.c    <span class="token comment"># 测试工具函数</span>├── docs/               <span class="token comment"># 存放文档（如设计文档、API文档等）</span>│   ├── design.md       <span class="token comment"># 设计文档</span>│   └── api.md          <span class="token comment"># API文档</span>├── build/              <span class="token comment"># 编译生成的中间文件和目标文件</span>├── bin/                <span class="token comment"># 存放最终生成的可执行文件</span>├── CMakeLists.txt      <span class="token comment"># 构建脚本</span>├── README.md           <span class="token comment"># 项目说明文档</span>└── LICENSE             <span class="token comment"># 项目许可证</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="cmake-文件结构"><a href="#cmake-文件结构" class="headerlink" title="cmake 文件结构"></a>cmake 文件结构</h2><p>每一个有源文件的地方都要有一个 cmake 文件</p><h3 id="项目根目录中"><a href="#项目根目录中" class="headerlink" title="项目根目录中"></a>项目根目录中</h3><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.15</span><span class="token punctuation">)</span><span class="token keyword">project</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">(</span>EXE_PATH <span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/bin<span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">(</span>INC_PATH <span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/inc<span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">(</span>LIB_PATH <span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/lib<span class="token punctuation">)</span><span class="token comment"># 设置名字</span><span class="token keyword">set</span><span class="token punctuation">(</span>APPNAME app<span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">(</span>APPNAME1 test1<span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">(</span>APPNAME2 test2<span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">(</span>LIBAD ad<span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">(</span>LIBDI di<span class="token punctuation">)</span><span class="token comment">#设置子目录</span><span class="token keyword">add_subdirectory</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token keyword">add_subdirectory</span><span class="token punctuation">(</span>ad<span class="token punctuation">)</span><span class="token keyword">add_subdirectory</span><span class="token punctuation">(</span>di<span class="token punctuation">)</span><span class="token keyword">add_subdirectory</span><span class="token punctuation">(</span>tests<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生成库文件-1"><a href="#生成库文件-1" class="headerlink" title="生成库文件"></a>生成库文件</h3><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">LIBRARY_OUTPUT_PATH</span> <span class="token punctuation">$&#123;</span>LIB_PATH<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">aux_source_directory</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/di SRC<span class="token punctuation">)</span><span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span>INC_PATH<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">add_library</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span>LIBDI<span class="token punctuation">&#125;</span> <span class="token namespace">SHARED</span> <span class="token punctuation">$&#123;</span>SRC<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生成可执行文件-1"><a href="#生成可执行文件-1" class="headerlink" title="生成可执行文件"></a>生成可执行文件</h3><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">EXECUTABLE_OUTPUT_PATH</span> <span class="token punctuation">$&#123;</span>EXE_PATH<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">aux_source_directory</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span><span class="token variable">PROJECT_SOURCE_DIR</span><span class="token punctuation">&#125;</span>/src SRC<span class="token punctuation">)</span><span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span>INC_PATH<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">link_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span>LIB_PATH<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span>APPNAME<span class="token punctuation">&#125;</span> <span class="token punctuation">$&#123;</span>SRC<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span>APPNAME<span class="token punctuation">&#125;</span> <span class="token punctuation">$&#123;</span>LIBAD<span class="token punctuation">&#125;</span> <span class="token punctuation">$&#123;</span>LIBDI<span class="token punctuation">&#125;</span> pthread<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生成测试文件"><a href="#生成测试文件" class="headerlink" title="生成测试文件"></a>生成测试文件</h3><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">EXECUTABLE_OUTPUT_PATH</span> <span class="token punctuation">$&#123;</span>EXE_PATH<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">#include_directories($&#123;INC_PATH&#125;)</span><span class="token keyword">link_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span>LIB_PATH<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span>APPNAME1<span class="token punctuation">&#125;</span> test1.c<span class="token punctuation">)</span> <span class="token comment">#分别生成执行文件</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span>APPNAME2<span class="token punctuation">&#125;</span> test2.c<span class="token punctuation">)</span><span class="token keyword">target_include_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span>APPNAME1<span class="token punctuation">&#125;</span> <span class="token namespace">PUBLIC</span> <span class="token punctuation">$&#123;</span>INC_PATH<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 分别链接各自头</span><span class="token keyword">target_include_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span>APPNAME2<span class="token punctuation">&#125;</span> <span class="token namespace">PUBLIC</span> <span class="token punctuation">$&#123;</span>INC_PATH<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span>APPNAME1<span class="token punctuation">&#125;</span> <span class="token punctuation">$&#123;</span>LIBAD<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment"># 分别链接库</span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span>APPNAME2<span class="token punctuation">&#125;</span> <span class="token punctuation">$&#123;</span>LIBDI<span class="token punctuation">&#125;</span> pthread<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h1><ul><li>项目文件下创建文件声明交叉编译链 <code>arm.cmake</code></li></ul><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token comment"># 目标系统名称</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_SYSTEM_NAME</span> Linux<span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_SYSTEM_PROCESSOR</span> arm<span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_C_STANDARD</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token comment"># 指定交叉编译器路径</span><span class="token keyword">set</span><span class="token punctuation">(</span>TOOLCHAIN_DIR /usr/local/arm/gcc-linaro-<span class="token number">4.9.4</span>-<span class="token number">2017.01</span>-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-<span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_C_COMPILER</span> <span class="token punctuation">$&#123;</span>TOOLCHAIN_DIR<span class="token punctuation">&#125;</span>gcc<span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_COMPILER</span> <span class="token punctuation">$&#123;</span>TOOLCHAIN_DIR<span class="token punctuation">&#125;</span>g++<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看交叉编译器路径方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">which</span> arm-linux-gnueabihf-gcc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在 build 目录下 <code>cmake</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmake <span class="token parameter variable">-DCMAKE_TOOLCHAIN_FILE</span><span class="token operator">=</span>./<span class="token punctuation">..</span>/arm.cmake <span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>正常 <code>make</code></li></ul><p>查看生成文件是什么架构：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">file</span> <span class="token punctuation">..</span>/bin/app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>makefile</title>
      <link href="/2025/09/18/makefile/"/>
      <url>/2025/09/18/makefile/</url>
      
        <content type="html"><![CDATA[<p>makefile 是从<strong>下往上执行</strong>的</p><ul><li>第一行语法为 <code>all</code> 的话，<code>make</code> 时默认 <code>make all</code></li><li>若不交叉编译，则不设置 <code>CC</code> 即可</li></ul><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>Makefile 是 make 命令所读取的配置文件，包含了构建项目的规则。其主要作用是检查项目文件的依赖关系，自动执行必要的命令，从而更新目标文件。一般来说，Makefile 主要包括以下三部分内容：</p><p><code>目标（Target）</code>：需要生成的文件，例如可执行文件。<br><code>依赖（Dependencies）</code>：生成目标所依赖的文件或目标。<br><code>命令（Commands）</code>：构建目标时需要执行的命令。</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><p><code>target</code>：目标文件，可以是一个目标文件或一个动作名称（伪目标）（例如：all, clean）。<br><code>dependencies</code>：生成目标所依赖的文件或其他目标。<br><code>command</code>：构建目标的命令，必须以 Tab 键开头。</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">target</span><span class="token punctuation">:</span> dependencies    command<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p>make 会根据 Makefile 中的规则，<strong>依次检查目标文件的时间戳和依赖文件的时间戳</strong>。如果依赖文件的时间戳比目标文件新，或者目标文件不存在，make 就会执行对应的命令来更新目标文件。make 会递归检查依赖关系，<strong>直到所有目标都更新完成</strong>。</p><h1 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h1><p>Makefile 支持定义变量，可以简化重复的命令。变量的定义格式为：</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">VARIABLE_NAME <span class="token operator">=</span> value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在引用变量时使用 <strong>$(VARIABLE_NAME)</strong>，如：</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">CC <span class="token operator">=</span> g++CFLAGS <span class="token operator">=</span> -Wall -g <span class="token target symbol">main.o</span><span class="token punctuation">:</span> main.cpp    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> -c main.cpp -o main.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述例子中，使用变量 $(CC) 和 $(CFLAGS) 来替代具体的编译器(g++)和编译选项(-wall -g)。</p><h1 id="常用的内置变量"><a href="#常用的内置变量" class="headerlink" title="常用的内置变量"></a>常用的内置变量</h1><p><code>$@</code>：表示目标文件。<br><code>$^</code>：表示所有的依赖文件。<br><code>$&lt;</code>：表示第一个依赖文件。</p><p>示例：</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">main</span><span class="token punctuation">:</span> main.o utils.o    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -o <span class="token variable">$@</span> <span class="token variable">$^</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在这里，$@ 表示目标文件 main，$^ 表示所有的依赖文件 main.o 和 utils.o。</p><h1 id="伪目标"><a href="#伪目标" class="headerlink" title="伪目标"></a>伪目标</h1><p>伪目标（phony targets）并不是文件，而是一种命令名称，可以用于执行一些常见的操作，如清理构建文件。它们通常定义为：</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> clean<span class="token target symbol">clean</span><span class="token punctuation">:</span>    rm -f *.o main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>clean 是一个伪目标，用于删除中间文件和可执行文件。</p><h1 id="makefile-模式匹配"><a href="#makefile-模式匹配" class="headerlink" title="makefile+ 模式匹配"></a>makefile+ 模式匹配</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>当所要编译的文件过多时，使用模式匹配能够简化操作</p><h2 id="模式匹配规则"><a href="#模式匹配规则" class="headerlink" title="模式匹配规则"></a>模式匹配规则</h2><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">%.o</span><span class="token punctuation">:</span> %.c        <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>%.o: %.c</code>：<br>这是一个通用规则（模式匹配规则），表示如何将任意 .c 文件编译为对应的 .o 文件。% 是一个通配符，表示任意文件的前缀，例如，add.c 编译为 add.o。</p><p>$(CC) -c $<code>&lt; -o $@</code>：<br>-c：告诉编译器只编译，不链接。<br><em>：<em>自动变量</em>，<em>表示第一个依赖文件</em>（<em>在这里是匹配的文件</em>，<em>如、等</em>）</em>。<em>：</em>@ 是目标文件（这里是 .o 文件），例如，将 add.c 编译为 add.o。</p><h2 id="Makefile-文件内容如下"><a href="#Makefile-文件内容如下" class="headerlink" title="Makefile 文件内容如下"></a>Makefile 文件内容如下</h2><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">src<span class="token operator">=</span>add.o div.o multi.o sub.o main.otarget<span class="token operator">=</span>app<span class="token target symbol"><span class="token variable">$</span>(target)</span><span class="token punctuation">:</span><span class="token variable">$</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>        <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$^</span> -o <span class="token variable">$@</span> <span class="token target symbol">%.o</span><span class="token punctuation">:</span>%.c        <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="makefile-函数"><a href="#makefile-函数" class="headerlink" title="makefile+ 函数"></a>makefile+ 函数</h1><h2 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h2><ul><li>$(wildcard PATTERN…)<br><code>功能</code>：获取指定目录下指定类型的文件列表</li><li><code>参数</code>：PATTERN 指的是某个或多个目录下的对应的某种类型的文件，如果有多个目录，一般使用空格间隔</li><li><code>返回</code>：得到的若干个文件的文件列表，文件名之间使用空格间隔</li><li>$(patsubst <pattern>,<replacement>,<text>)<br><code>功能</code>：查找<text>中的单词(单词以“空格”、“Tab”或“回车”“换行”分隔)是否符合模式<pattern>，如果匹配的话，则以<replacement>替换</li><li><code>&lt;pattern&gt;</code> 可以包括通配符 %，表示任意长度的字串。如果<replacement>中也包含 %，那么，<replacement>中的这个 % 将是<pattern>中的那个 % 所代表的字串。(可以用\来转义，以 % 来表示真实含义的 % 字符)</li><li><code>返回</code>：函数返回被替换过后的字符串</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><strong>目录结构</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">project/├── Makefile├── main.cpp├── utils.cpp├── utils.h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码：</strong></p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token comment"># Compiler</span>CXX <span class="token operator">=</span> g++<span class="token comment"># Compiler flags</span>CXXFLAGS <span class="token operator">=</span> -Wall -std<span class="token operator">=</span>c++17<span class="token comment"># Source files</span>SRCS <span class="token operator">=</span> main.cpp utils.cpp <span class="token comment"># Object files (replace .cpp with .o)</span>OBJS <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>SRCS<span class="token punctuation">:</span>.cpp<span class="token operator">=</span>.o<span class="token punctuation">)</span><span class="token comment"># Output executable name</span>TARGET <span class="token operator">=</span> app <span class="token comment"># Default rule to build the target</span><span class="token target symbol">all</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span><span class="token comment"># Rule to link object files into the executable</span><span class="token target symbol"><span class="token variable">$</span>(TARGET)</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span>        <span class="token variable">$</span><span class="token punctuation">(</span>CXX<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CXXFLAGS<span class="token punctuation">)</span> -o <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span><span class="token comment"># Rule to compile source files into object files%.o: %.cpp</span>        <span class="token variable">$</span><span class="token punctuation">(</span>CXX<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CXXFLAGS<span class="token punctuation">)</span> -c <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span> <span class="token comment"># Clean rule to remove object files and executable</span><span class="token target symbol">clean</span><span class="token punctuation">:</span>        rm -f <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>TARGET<span class="token punctuation">)</span><span class="token comment"># Phony targets to avoid conflicts with file names.PHONY: all clean</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h1><h2 id="一条语法下的变量仅在当前语法下生效（类似局部变量）"><a href="#一条语法下的变量仅在当前语法下生效（类似局部变量）" class="headerlink" title="一条语法下的变量仅在当前语法下生效（类似局部变量）"></a>一条语法下的变量仅在当前语法下生效（类似局部变量）</h2><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> clean src <span class="token operator">=</span> add.o div.o multi.o sub.o main.otarget <span class="token operator">=</span> app<span class="token target symbol"><span class="token variable">$</span>(target)</span> <span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>        <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$^</span> -o <span class="token variable">$@</span><span class="token target symbol">%.o</span> <span class="token punctuation">:</span> %.c        <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span><span class="token target symbol">clean</span><span class="token punctuation">:</span>        rm -f <span class="token variable">$@</span> *.o <span class="token comment">#错误，此处$@表示的是目标文件，既clean</span>        rm -f <span class="token variable">$</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> *.o <span class="token comment">#正确</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PHONY"><a href="#PHONY" class="headerlink" title=".PHONY"></a>.PHONY</h2><p>用于声明某些目标是“伪目标”（phony targets）。它的作用是为了避免目标名称与实际文件名发生冲突，并明确告诉 <code>make</code> 这些目标并不代表实际的文件。</p><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>在 make 语法中通配符为 %</p><p>在 clean 中，通配符为*</p><h1 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h1><h2 id="交叉编译一个文件"><a href="#交叉编译一个文件" class="headerlink" title="交叉编译一个文件"></a>交叉编译一个文件</h2><p>或者多个依赖文件相同的文件</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> clean allCC <span class="token operator">=</span> arm-linux-gnueabihf-gcc     <span class="token comment">#交叉编译</span>CLFAGS <span class="token operator">=</span> -Wall -g -O2target <span class="token operator">=</span> test1 test2obj <span class="token operator">=</span> add.o div.o multi.o sub.o main.oscr <span class="token operator">=</span> add.c div.c multi.c sub.c main.c<span class="token target symbol">all</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token target symbol"><span class="token variable">$</span>(target)</span> <span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>        <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CLFAGS<span class="token punctuation">)</span> <span class="token variable">$^</span> -o <span class="token variable">$@</span><span class="token target symbol">%.o</span> <span class="token punctuation">:</span> %.c        <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CLAGS<span class="token punctuation">)</span> -c <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span><span class="token target symbol">clean</span><span class="token punctuation">:</span>        rm -f <span class="token variable">$</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="交叉编译两个文件"><a href="#交叉编译两个文件" class="headerlink" title="交叉编译两个文件"></a>交叉编译两个文件</h2><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> clean allCC <span class="token operator">=</span> arm-linux-gnueabihf-gccCLFAGS <span class="token operator">=</span> -Wall -g -O2target1 <span class="token operator">=</span> test1target2 <span class="token operator">=</span> test2target <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>target1<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>target2<span class="token punctuation">)</span>obj1 <span class="token operator">=</span> add.o div.o multi.o sub.oobj2 <span class="token operator">=</span> add.o sub.osrc <span class="token operator">=</span> add.c div.c multi.c sub.c mian.c mian2.c<span class="token target symbol">all</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token target symbol"><span class="token variable">$</span>(target1)</span> <span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span> main.o        <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> <span class="token variable">$^</span> -o <span class="token variable">$@</span><span class="token target symbol"><span class="token variable">$</span>(target2)</span> <span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> main2.o        <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> <span class="token variable">$^</span> -o <span class="token variable">$@</span><span class="token target symbol">%.o</span> <span class="token punctuation">:</span> %.c        <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CLAGS<span class="token punctuation">)</span> -c <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span><span class="token target symbol">clean</span><span class="token punctuation">:</span>        rm -f <span class="token variable">$</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> *.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim</title>
      <link href="/2025/09/18/vim/"/>
      <url>/2025/09/18/vim/</url>
      
        <content type="html"><![CDATA[<h2 id="vi-vim-的使用"><a href="#vi-vim-的使用" class="headerlink" title="vi&#x2F;vim 的使用"></a>vi&#x2F;vim 的使用</h2><p>基本上 vi&#x2F;vim 共分为三种模式，<strong>命令模式（Command Mode）、输入模式（Insert Mode）和命令行模式（Command-Line Mode）</strong>。</p><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p><strong>用户刚刚启动 vi&#x2F;vim，便进入了命令模式。</strong></p><p>此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符，比如我们此时按下 i，并不会输入一个字符，i 被当作了一个命令。</p><p>以下是普通模式常用的几个命令：</p><ul><li><strong>i – 切换到输入模式，在光标当前位置开始输入文本。</strong></li><li><strong>x – 删除当前光标所在处的字符。</strong></li><li><strong>: – 切换到底线命令模式，以在最底一行输入命令。</strong></li><li><strong>a – 进入插入模式，在光标下一个位置开始输入文本。</strong></li><li><strong>o：在当前行的下方插入一个新行，并进入插入模式。</strong></li><li><strong>O – 在当前行的上方插入一个新行，并进入插入模式。</strong></li><li><strong>dd – 剪切当前行。</strong></li><li><strong>yy – 复制当前行。</strong></li><li><strong>p（小写） – 粘贴剪贴板内容到光标下方。</strong></li><li><strong>P（大写）– 粘贴剪贴板内容到光标上方。</strong></li><li><strong>u – 撤销上一次操作。</strong></li><li><strong>Ctrl + r – 重做上一次撤销的操作。</strong></li><li><strong>:w – 保存文件。</strong></li><li><strong>:q – 退出 Vim 编辑器。</strong></li><li><strong>:q! – 强制退出 Vim 编辑器，不保存修改。</strong></li></ul><p>若想要编辑文本，只需要启动 Vim，进入了命令模式，按下 i 切换到输入模式即可。</p><p>命令模式只有一些最基本的命令，因此仍要依靠<strong>底线命令行模式</strong>输入更多命令。</p><h3 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h3><p>在命令模式下按下 i 就进入了输入模式，使用 Esc 键可以返回到普通模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及 Shift 组合</strong>，输入字符</li><li><strong>ENTER</strong>，回车键，换行</li><li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li><li><strong>DEL</strong>，删除键，删除光标后一个字符</li><li><strong>方向键</strong>，在文本中移动光标</li><li><strong>HOME</strong>&#x2F;<strong>END</strong>，移动光标到行首&#x2F;行尾</li><li><strong>Page Up</strong>&#x2F;<strong>Page Down</strong>，上&#x2F;下翻页</li><li><strong>Insert</strong>，切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线</li><li><strong>ESC</strong>，退出输入模式，切换到命令模式</li></ul><h3 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h3><p>在命令模式下按下 :（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li><code>:w</code>：保存文件。</li><li><code>:q</code>：退出 Vim 编辑器。</li><li><code>:wq</code>：保存文件并退出 Vim 编辑器。</li><li><code>:q!</code>：强制退出 Vim 编辑器，不保存修改。</li></ul><p>按 ESC 键可随时退出底线命令模式。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>柔性数组</title>
      <link href="/2025/09/11/%E6%9F%94%E6%80%A7%E6%95%B0%E7%BB%84/"/>
      <url>/2025/09/11/%E6%9F%94%E6%80%A7%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="柔性数组的定义"><a href="#柔性数组的定义" class="headerlink" title="柔性数组的定义"></a>柔性数组的定义</h1><p>柔性数组必须是结构体的最后一个成员，且不能指定大小：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">flex_array</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span>          <span class="token comment">// 用于记录数组元素数量</span>    <span class="token keyword">int</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment">// 柔性数组，不指定大小</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="柔性数组的特点"><a href="#柔性数组的特点" class="headerlink" title="柔性数组的特点"></a>柔性数组的特点</h1><ol><li>柔性数组只能作为结构体的最后一个成员</li><li>柔性数组不占用结构体的存储空间</li><li>通过结构体指针访问柔性数组</li><li>需要动态分配内存来使用柔性数组</li></ol><h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token comment">// 定义包含柔性数组的结构体</span><span class="token keyword">struct</span> <span class="token class-name">flex_buffer</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">size_t</span> size<span class="token punctuation">;</span>         <span class="token comment">// 缓冲区大小</span>    <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment">// 柔性数组</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 创建一个柔性数组缓冲区</span><span class="token keyword">struct</span> <span class="token class-name">flex_buffer</span><span class="token operator">*</span> <span class="token function">create_buffer</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 分配内存：结构体大小 + 柔性数组所需大小</span>    <span class="token keyword">struct</span> <span class="token class-name">flex_buffer</span><span class="token operator">*</span> buf <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">flex_buffer</span><span class="token punctuation">)</span> <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        buf<span class="token operator">-></span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>        <span class="token comment">// 初始化柔性数组内容为0</span>        <span class="token function">memset</span><span class="token punctuation">(</span>buf<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> buf<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用柔性数组</span><span class="token keyword">void</span> <span class="token function">use_buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建一个能存储100个字符的缓冲区</span>    <span class="token keyword">struct</span> <span class="token class-name">flex_buffer</span><span class="token operator">*</span> buffer <span class="token operator">=</span> <span class="token function">create_buffer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"内存分配失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// 向柔性数组中写入数据</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>buffer<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token string">"这是一个柔性数组的示例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"缓冲区大小: %zu\n"</span><span class="token punctuation">,</span> buffer<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"缓冲区内容: %s\n"</span><span class="token punctuation">,</span> buffer<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 释放内存</span>    <span class="token function">free</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">use_buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="柔性数组的优点"><a href="#柔性数组的优点" class="headerlink" title="柔性数组的优点"></a>柔性数组的优点</h1><ol><li>内存连续性：结构体和数组元素在内存中是连续的，有利于提高访问效率</li><li>内存管理简单：只需一次 malloc 和一次 free 操作</li><li>避免指针带来的额外开销：相比使用指针成员，柔性数组不需要额外的指针存储空间</li></ol><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li>柔性数组必须是结构体的最后一个成员</li><li>不能有多个柔性数组</li><li>不能直接使用 sizeof 获取包含柔性数组的结构体总大小</li><li>必须通过动态内存分配来使用柔性数组</li></ol><p>柔性数组特别适合用于创建可变大小的缓冲区、数据包结构等需要动态调整大小的数据结构。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何确保 32 位系统和 64 位系统的代码兼容性</title>
      <link href="/2025/09/11/32%E4%BD%8D%E7%B3%BB%E7%BB%9F%E5%92%8C64%E4%BD%8D%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BB%A3%E7%A0%81%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
      <url>/2025/09/11/32%E4%BD%8D%E7%B3%BB%E7%BB%9F%E5%92%8C64%E4%BD%8D%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BB%A3%E7%A0%81%E5%85%BC%E5%AE%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型选择"><a href="#数据类型选择" class="headerlink" title="数据类型选择"></a>数据类型选择</h1><ul><li>避免使用固定大小的类型（如 int），改用跨平台的精确宽度类型（如 int32_t、uint64_t 等 C&#x2F;C++ 中的 stdint.h 定义类型）</li><li>注意指针大小差异：32 位系统指针为 4 字节，64 位为 8 字节，避免将指针强制转换为 int 等固定大小类型</li></ul><h1 id="内存处理"><a href="#内存处理" class="headerlink" title="内存处理"></a>内存处理</h1><ul><li>计算内存大小时使用 sizeof()而非硬编码数值</li><li>注意数组索引和偏移量计算，避免因指针大小变化导致越界</li><li>序列化&#x2F;反序列化数据时明确指定类型大小，避免跨平台传输错误</li></ul><h1 id="常量与宏定义"><a href="#常量与宏定义" class="headerlink" title="常量与宏定义"></a>常量与宏定义</h1><ul><li>避免使用依赖于系统位数的常量（如 0xFFFFFFFF 作为掩码在 32 位是全 1，64 位则不是）</li><li>使用条件编译区分不同架构（如 C&#x2F;C++ 中的 <code>#ifdef _WIN64</code> 或 <code>#ifdef __x86_64__</code>）</li></ul><h1 id="函数与库调用"><a href="#函数与库调用" class="headerlink" title="函数与库调用"></a>函数与库调用</h1><ul><li>注意库函数的参数和返回值类型是否与系统位数相关</li><li>确保链接正确版本的库文件（32 位&#x2F;64 位库不能混用）</li><li>对于 Windows API，注意使用正确的数据类型（如 HANDLE 在 64 位系统是 64 位）</li></ul><h1 id="文件格式与网络协议"><a href="#文件格式与网络协议" class="headerlink" title="文件格式与网络协议"></a>文件格式与网络协议</h1><ul><li>处理文件格式时明确数据的字节长度和字节序</li><li>网络传输中确保数据按照协议规定的大小传输，不受本地系统位数影响</li></ul><h1 id="编译与构建"><a href="#编译与构建" class="headerlink" title="编译与构建"></a>编译与构建</h1><ul><li>使用跨平台构建工具（如 CMake）并正确配置位数参数</li><li>为不同架构提供独立的编译目标和输出目录</li><li>编写自动化测试验证两种架构下的正确性</li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN64</span></span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PLATFORM</span> <span class="token string">"64-bit Windows"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">_WIN32</span></span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PLATFORM</span> <span class="token string">"32-bit Windows"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">__x86_64__</span></span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PLATFORM</span> <span class="token string">"64-bit Unix/Linux"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression">__i386__</span></span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PLATFORM</span> <span class="token string">"32-bit Unix/Linux"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">// 使用明确大小的类型</span><span class="token class-name">uint32_t</span> <span class="token function">calculate_checksum</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">,</span> <span class="token class-name">size_t</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 确保算法在不同位数系统上表现一致</span>    <span class="token class-name">uint32_t</span> checksum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token class-name">uint8_t</span><span class="token operator">*</span> bytes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        checksum <span class="token operator">=</span> <span class="token punctuation">(</span>checksum <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">^</span> bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> checksum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LoRa</title>
      <link href="/2025/09/10/LoRa/"/>
      <url>/2025/09/10/LoRa/</url>
      
        <content type="html"><![CDATA[<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul><li>远距离<br>在乡村地区能以长达 30 英里的距离为间隔连接设备，可穿透建筑物密集的市区或进深较长的室内环境。</li><li>低功耗<br>仅需极少能源，电池使用寿命长达 10 年，将电池更换成本降到最低。</li></ul><h1 id="关键参数"><a href="#关键参数" class="headerlink" title="关键参数"></a>关键参数</h1><ol><li>载波频率<br>LoRa 的工作频率。范围在 410MHz-493MHz。典型值 433MHz，470MHz，490MHz。</li><li>发射功率<br>发射功率越大，信号能传输的距离就越远。我们的模块最大发射功率可以到 22dbm。<br>dBm 是分贝毫瓦（decibel-milliwatts）的缩写，是一个基于对数的单位，用于表示功率相对于 1 毫瓦（mW）的级别。</li><li>空中速率<br>LoRa 的“空中速率”（也称为“空中数据速率”或“无线数据速率”）指的是 LoRa 系统在无线空中接口上实现的数据传输速率。这个速率是指在 LoRa 通信中，数据以多快的速度通过空中从一个设备传输到另一个设备。空中速率受多种因素影响，包括**扩频因子（Spreading Factor, SF）、带宽（Bandwidth）、编码率（Coding Rate）等。</li><li>扩频因子（SF）<br>扩频因子<strong>决定了每个比特的信息是如何通过多个被称为“码片”（chirps）的符号进行编码的</strong>。具体来说，SF 值越高，每个信息比特被映射成更多的码片。例如，SF&#x3D;7 意味着每个比特被编码为 128（2727）个码片。</li></ol><p><img src="/../images/PixPin_2025-09-18_14-17-17.jpg"><img src="/../images/PixPin_2025-09-18_14-18-15.jpg"></p><ol><li>带宽（BW）<br>带宽是指可用于 LoRa 传输的频率范围。带宽越宽，可传输的数据量越大，因此空中速率会提高。</li><li>编码率（CR）<br>编码率是指数据冗余度的级别。增加编码率可以提高传输的可靠性，但会稍微降低空中速率。<br><img src="/../images/EcvBbOqUXo8aaSxMOffc0BwHn6b.png"></li><li>用冗余的数据可以提供一定的纠错能力</li><li>符号速率</li></ol><p>$$<br>Rs &#x3D; \frac{BW}{2^{SF}}<br>$$</p><h1 id="LoRa-传输包格式"><a href="#LoRa-传输包格式" class="headerlink" title="LoRa 传输包格式"></a>LoRa 传输包格式</h1><p><img src="/../images/BsygbYM5ao4JdfxuwmBcTrLJnMh.png"></p><h1 id="CAD-信道活动检测"><a href="#CAD-信道活动检测" class="headerlink" title="CAD 信道活动检测"></a>CAD 信道活动检测</h1><p>信道活动检测模式旨在以尽可能高的功耗效率检测无线信道上的 LoRa 前导码。在 CAD 模式下，SX1276&#x2F;77&#x2F;78 快速扫描频段，以检测 LoRa 数据包前导码。</p><h2 id="CAD-工作流程"><a href="#CAD-工作流程" class="headerlink" title="CAD 工作流程"></a>CAD 工作流程</h2><ol><li>PLL 被锁定。</li><li>无线接收机从信道获取数据的 LoRa 前导码符号。在此期间的电流消耗对应指定的 Rx 模式电流。</li><li>无线接收机及 PLL 被关闭，调制解调器数字处理开始执行。</li><li>调制解调器搜索芯片所获取样本与理想前导码波形之间的关联关系。建立这样的关联关系所需的时间仅略小于一个符号周期。在此期间，电流消耗大幅度减少。</li><li>完成计算后，调制解调器产生 CadDone 中断信号。如果关联成功，则会同时产生 CadDetected 信号。</li><li>芯片恢复到待机模式。</li><li>如果发现前导码，清除中断，然后将芯片设置为 Rx 单一或连续模式，从而开始接收数据。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LoRa </tag>
            
            <tag> 通信协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPP兼容性问题分析</title>
      <link href="/2025/09/03/cpp%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
      <url>/2025/09/03/cpp%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="现象描述"><a href="#现象描述" class="headerlink" title="现象描述"></a>现象描述</h1><p>若导出的 API 使用了 C++ 标准库类型（如 <code>std::vector</code>、<code>std::map</code>、<code>std::string</code>、<code>std::shared_ptr</code> 等），在不同编译环境、编译器、标准库版本 .so 调用时可能出现编译、链接或运行时异常，主要表现为：</p><blockquote><p>链接符号未定义（undefined symbol）<br>模板实例化或类型信息不一致导致崩溃<br>接口数据结构错乱、内存访问异常<br>结构体成员内容失真，数据读取错误</p></blockquote><h1 id="ABI-与-API-的区别"><a href="#ABI-与-API-的区别" class="headerlink" title="ABI 与 API 的区别"></a>ABI 与 API 的区别</h1><p>API（应用编程接口）：即头文件中的接口、类型和函数声明，描述了编译器和程序员可以用来编程的内容。</p><p>ABI（应用二进制接口）：是编译后实体（如对象布局、名称修饰、虚表等）的具体二进制格式，决定不同二进制模块（如动态库、应用）之间能否兼容并联动。</p><blockquote><p><strong>库 API + 编译器 ABI &#x3D; 库 ABI</strong><br>不同编译器（或同一编译器的不同版本&#x2F;不同参数）生成的 ABI 规则可能不同，同样的 API 编译出来二进制层面可能不兼容。<br>只有库 API 和编译 ABI 规范都一致，最终的库 ABI 才和应用程序期待的一致。二者只要有一方不一致，库 ABI 就不一样，直接影响到二进制兼容问题。</p></blockquote><h2 id="进一步说明"><a href="#进一步说明" class="headerlink" title="进一步说明"></a>进一步说明</h2><ul><li>C++ 的 ABI 由 多方面共同决定。 编译器实现、标准库实现、编译选项</li><li>不同操作系统、编译器（GCC&#x2F;Clang&#x2F;MSVC）、标准库版本，以及不同 <code>-std=c++XX</code>&#x2F;<code>-O2/-g</code>&#x2F;各种 ABI 宏参数，均会影响生成的二进制布局。</li></ul><blockquote><p>编译器实现不同：分别用 GCC 和 MSVC 这两种编译器来编译。<br>GCC 符号：_Z8set_nameR6PersonRKSs<br>MSVC 符号：?set_name@@YAXAUPerson@@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</p></blockquote><blockquote><p>标准库实现不同：C++11 前后一些关键类的名字在 ABI 层面生了改变（比如 std::string 和 std::list），导致 C++11 之前和之后编译出来的目标文件不兼容。换句话说如果某个库的提供方使用的是 C++11 之前的 ABI 编译的，那么依赖这个库的项目必须也用旧的 ABI 编译。</p></blockquote><blockquote><p>编译选项不同：GCC 的 <code>_GLIBCXX_USE_CXX11_ABI</code>，不同设置会导致 <code>std::string</code>、<code>std::vector</code> 等内部结构变化。</p></blockquote><h1 id="STL-库实现差异导致的-ABI-不兼容"><a href="#STL-库实现差异导致的-ABI-不兼容" class="headerlink" title="STL 库实现差异导致的 ABI 不兼容"></a>STL 库实现差异导致的 ABI 不兼容</h1><h2 id="现象描述-1"><a href="#现象描述-1" class="headerlink" title="现象描述"></a>现象描述</h2><p>在编译 so 时使用的是 LLVM libc++，在另一平台使用该 so 时，编译报链接错误，缺少在 std::__ndk1 下对应的实现（so 中提供的是 std::__1 下的实现）。该现象存在于使用 C++ 的 STL 库的地方。</p><p>std::__1 是 LLVM libc++（比如 macOS、iOS、部分非 NDK 构建下）的内部命名空间。</p><p><img src="/../images/TQr3b39HgoznMCxRBaPchBAtnvX.png"></p><p>std::__ndk1 是 Android NDK 下 LLVM libc++ 实现的 STL（标准模板库）内部命名空间。</p><p><img src="/../images/I22jbaIZhohpIOxZ3iLc3Obsnvc.png"></p><p>__1 与 __ndk1 的代码和接口几乎一样，但  二进制符号完全隔离，任何跨命名空间混用都是致命错误。</p><blockquote><p>使用命令 nm -DC xxx.so | grep shared_ptr 查看</p></blockquote><table><tr><td>项<br/></td><td>std::__1<br/></td><td>std::__ndk1<br/></td></tr><tr><td>适用平台<br/></td><td>macOS/iOS/Xcode/部分Linux<br/></td><td>Android NDK<br/></td></tr><tr><td>头文件实现路径<br/></td><td>cxx-stl/llvm-libc++/include<br/></td><td>cxx-stl/llvm-libc++/include<br/></td></tr><tr><td>名字空间<br/></td><td> std::__1<br/></td><td>std::__ndk1<br/></td></tr><tr><td>二进制符号名<br/></td><td> mangled __1<br/></td><td>mangled __ndk1<br/></td></tr><tr><td>兼容性<br/></td><td>不能混用<br/></td><td>不能混用<br/></td></tr></table><blockquote><p>std::__1 vs std::__ndk1 是库 ABI 差异的一种（属于标准库实现者特意增加的符号级 ABI 隔离策略），而不是库 API 差异，也不是单纯的编译器 ABI 差异。</p></blockquote><h1 id="具体示例"><a href="#具体示例" class="headerlink" title="具体示例"></a>具体示例</h1><h2 id="std-shared-ptr"><a href="#std-shared-ptr" class="headerlink" title="std::shared_ptr"></a>std::shared_ptr</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">_<span class="token comment">// 实现_</span><span class="token keyword">void</span> <span class="token class-name">EventChannel</span><span class="token double-colon punctuation">::</span><span class="token function">setStreamHandler</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>StreamHandler<span class="token operator">></span> _handler_<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> requestHandler <span class="token operator">=</span>    std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>IncomingStreamRequestHandler<span class="token operator">></span></span></span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> messenger_<span class="token punctuation">,</span> name_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>taskQueue_ <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    messenger_<span class="token operator">-></span><span class="token function">setMessageHandler</span><span class="token punctuation">(</span>name_<span class="token punctuation">,</span> requestHandler<span class="token punctuation">,</span>    std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">shared_ptr</span><span class="token generic class-name"><span class="token operator">&lt;</span>BinaryMessenger<span class="token double-colon punctuation">::</span>TaskQueue<span class="token operator">></span></span></span><span class="token punctuation">(</span>taskQueue_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    messenger_<span class="token operator">-></span><span class="token function">setMessageHandler</span><span class="token punctuation">(</span>name_<span class="token punctuation">,</span> requestHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>_<span class="token comment">// 调用_</span>mTestEventHandler <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>MyStreamHandler<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mTestEventChannel<span class="token operator">-></span><span class="token function">setStreamHandler</span><span class="token punctuation">(</span>mTestEventHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="std-shared-ptr-std-string"><a href="#std-shared-ptr-std-string" class="headerlink" title="std::shared_ptr   std::string"></a>std::shared_ptr   std::string</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">_<span class="token comment">// 实现_</span><span class="token class-name">EventChannel</span><span class="token double-colon punctuation">::</span><span class="token function">EventChannel</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>BMessenger<span class="token operator">></span> messenger<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string <span class="token operator">&amp;</span>channelName<span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token function">EventChannel</span><span class="token punctuation">(</span>messenger<span class="token punctuation">,</span> channelName<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>_<span class="token comment">// 调用_</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>DMessenger<span class="token operator">></span> messenger <span class="token operator">=</span> executor<span class="token operator">-></span><span class="token function">getDMessenger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>my_class<span class="token double-colon punctuation">::</span>EventChannel <span class="token function">eventChannel</span><span class="token punctuation">(</span>messenger<span class="token punctuation">,</span> <span class="token string">"com.example.stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><ul><li><p>新旧 ABI 共存（只适用于 GCC（libstdc++）系列的 STL）：<br>通过在新实现的命名空间加 <code>std::__cxx11::</code> 前缀（inline namespace），新老实现的类型获得不同的符号。例如：<br>    <code>std::__cxx11::list&lt;int&gt;</code> vs <code>std::list&lt;int&gt;</code></p></li><li><p>控制 ABI 切换的宏（只适用于 GCC（libstdc++）系列的 STL）：<br><code>-D_GLIBCXX_USE_CXX11_ABI=1</code>（默认，为新 ABI），设为 0 则用老 ABI。不同源码文件可以单独选择使用新&#x2F;旧 ABI。</p></li><li><p><strong>采用 C 接口</strong>：</p><ol><li>C 接口是明确规范的二进制接口，任何平台都能兼容，是业界跨模块&#x2F;语言边界的标准方案。</li><li>C++ 可以自由引用 C 的代码而不出现二进制兼容问题。</li></ol></li></ul><blockquote><p>官方建议<br>编译相互依赖的代码时，不要混用新旧 ABI 产物<br><a href="https://gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html">ABI Policy and Guidelines</a></p></blockquote><h2 id="最佳方案"><a href="#最佳方案" class="headerlink" title="最佳方案"></a>最佳方案</h2><ul><li>对外只暴露 C 接口</li><li>标准库&#x2F;模板&#x2F;复杂对象全部只在 C++ 内部使用</li><li>修改代码生成新 so 后，与原先 so 进行 ABI 检查，确保兼容性</li><li>可参考开源项目的 C 接口暴露方法，如 RocksDB</li></ul><h3 id="简单修改示例"><a href="#简单修改示例" class="headerlink" title="简单修改示例"></a>简单修改示例</h3><p><strong>std::vector 封装</strong></p><p>头文件（C 接口）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//vector_c_api.h</span><span class="token keyword">typedef</span> <span class="token keyword">void</span><span class="token operator">*</span> VectorHandle<span class="token punctuation">;</span>VectorHandle <span class="token function">vector_create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">vector_destroy</span><span class="token punctuation">(</span>VectorHandle v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">vector_push_back</span><span class="token punctuation">(</span>VectorHandle v<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">vector_get</span><span class="token punctuation">(</span>VectorHandle v<span class="token punctuation">,</span> size_t index<span class="token punctuation">)</span><span class="token punctuation">;</span>size_t <span class="token function">vector_size</span><span class="token punctuation">(</span>VectorHandle v<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C++ 实现（so 内部）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"vector_c_api.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">struct</span> <span class="token class-name">VectorWrapper</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>VectorHandle <span class="token function">vector_create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">VectorWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">vector_destroy</span><span class="token punctuation">(</span>VectorHandle _v_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>VectorWrapper<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">vector_push_back</span><span class="token punctuation">(</span>VectorHandle _v_<span class="token punctuation">,</span> <span class="token keyword">int</span> _value_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>VectorWrapper<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">-></span>vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">vector_get</span><span class="token punctuation">(</span>VectorHandle _v_<span class="token punctuation">,</span> size_t _index_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>VectorWrapper<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">-></span>vec<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>size_t <span class="token function">vector_size</span><span class="token punctuation">(</span>VectorHandle _v_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>VectorWrapper<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">-></span>vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="具体代码分析"><a href="#具体代码分析" class="headerlink" title="具体代码分析"></a>具体代码分析</h3><p>由于在我的项目中遇到的是 STL 库实现差异导致的 ABI 不兼容，所以仅针对 STL 库进行修改。</p><p>思路是把 STL 形参改为 C 语言形式的形参，然后函数内部转换回 STL 形式。</p><p><strong>示例 1</strong></p><p>原始代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">EventChannel</span><span class="token double-colon punctuation">::</span><span class="token function">setStreamHandler</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>StreamHandler<span class="token operator">></span> _handler_<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> requestHandler <span class="token operator">=</span>    std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>IncomingStreamRequestHandler<span class="token operator">></span></span></span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> messenger_<span class="token punctuation">,</span> name_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>taskQueue_ <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    messenger_<span class="token operator">-></span><span class="token function">setMessageHandler</span><span class="token punctuation">(</span>name_<span class="token punctuation">,</span> requestHandler<span class="token punctuation">,</span>    std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">shared_ptr</span><span class="token generic class-name"><span class="token operator">&lt;</span>BinaryMessenger<span class="token double-colon punctuation">::</span>TaskQueue<span class="token operator">></span></span></span><span class="token punctuation">(</span>taskQueue_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    messenger_<span class="token operator">-></span><span class="token function">setMessageHandler</span><span class="token punctuation">(</span>name_<span class="token punctuation">,</span> requestHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">EventChannel</span><span class="token double-colon punctuation">::</span><span class="token function">setStreamHandler</span><span class="token punctuation">(</span>StreamHandler <span class="token operator">*</span>_handler_<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> handler_sp <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">shared_ptr</span><span class="token generic class-name"><span class="token operator">&lt;</span>StreamHandler<span class="token operator">></span></span></span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>StreamHandler <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> requestHandler <span class="token operator">=</span>    std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">make_shared</span><span class="token generic class-name"><span class="token operator">&lt;</span>IncomingStreamRequestHandler<span class="token operator">></span></span></span><span class="token punctuation">(</span>handler_sp<span class="token punctuation">,</span> messenger_<span class="token punctuation">,</span> name_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>taskQueue_ <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        messenger_<span class="token operator">-></span><span class="token function">setMessageHandler</span><span class="token punctuation">(</span>name_<span class="token punctuation">,</span> requestHandler<span class="token punctuation">,</span>        std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">shared_ptr</span><span class="token generic class-name"><span class="token operator">&lt;</span>BinaryMessenger<span class="token double-colon punctuation">::</span>TaskQueue<span class="token operator">></span></span></span><span class="token punctuation">(</span>taskQueue_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        messenger_<span class="token operator">-></span><span class="token function">setMessageHandler</span><span class="token punctuation">(</span>name_<span class="token punctuation">,</span> requestHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 2</strong></p><p>原始代码</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">void</span> <span class="token function">showSystemOverlays</span><span class="token punctuation">(</span>std<span class="token operator">:</span><span class="token operator">:</span>vector<span class="token operator">&lt;</span><span class="token keyword">const</span> std<span class="token operator">:</span><span class="token operator">:</span><span class="token builtin">string</span><span class="token operator">></span> _overlays_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>overlays<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token constant">ALOGD</span><span class="token punctuation">(</span><span class="token string">"showSystemOverlays overlays is null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token constant">ALOGD</span><span class="token punctuation">(</span><span class="token string">"showSystemOverlays called"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">showSystemOverlays</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span><span class="token operator">*</span> _overlays_<span class="token punctuation">,</span> size_t _count_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>overlays <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">||</span> count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">ALOGD</span><span class="token punctuation">(</span><span class="token string">"showSystemOverlays overlays is null or count==0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> overlay_list<span class="token punctuation">;</span>    overlay_list<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>size_t i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>count<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>_        <span class="token comment">// NULL_</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>overlays<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        overlay_list<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>overlays<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        overlay_list<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">ALOGD</span><span class="token punctuation">(</span><span class="token string">"PlatformMessageHandlerImpl::showSystemOverlays called, overlays count = %zu"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改模板"><a href="#修改模板" class="headerlink" title="修改模板"></a>修改模板</h3><p><strong>std::shared_ptr<Foo></strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">_<span class="token comment">//h_</span><span class="token keyword">void</span> <span class="token function">process_foo</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> _foo_<span class="token punctuation">)</span><span class="token punctuation">;</span>_<span class="token comment">//cpp_</span><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">process_foo</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> _foo_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Foo<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Foo<span class="token operator">*</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>_    <span class="token comment">// pC++_</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>std::string</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">_<span class="token comment">//h_</span><span class="token keyword">void</span> <span class="token function">process_string</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> _str_<span class="token punctuation">)</span><span class="token punctuation">;</span>_<span class="token comment">//cpp_</span><span class="token keyword">void</span> <span class="token function">process_string</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> _str_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>string <span class="token function">s</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>_ <span class="token comment">// std::string_</span>_<span class="token comment">// s_</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>std::vector</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">_<span class="token comment">//h_</span><span class="token keyword">void</span> <span class="token function">process_numbers</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> _arr_<span class="token punctuation">,</span> size_t _count_<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">process_strings</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span><span class="token operator">*</span> _arr_<span class="token punctuation">,</span> size_t _count_<span class="token punctuation">)</span><span class="token punctuation">;</span>_<span class="token comment">//cpp_</span><span class="token keyword">void</span> <span class="token function">process_numbers</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> _arr_<span class="token punctuation">,</span> size_t _count_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>_    <span class="token comment">// ..._</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">process_strings</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span><span class="token operator">*</span> _arr_<span class="token punctuation">,</span> size_t _count_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">></span> vec<span class="token punctuation">;</span>    vec<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> vec<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> vec<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>_    <span class="token comment">// ..._</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>std::map</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">_<span class="token comment">//h_</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> key<span class="token punctuation">;</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span>_ <span class="token comment">// or double/const char*_</span><span class="token punctuation">&#125;</span> MapItem<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">process_map</span><span class="token punctuation">(</span><span class="token keyword">const</span> MapItem<span class="token operator">*</span> _items_<span class="token punctuation">,</span> size_t _count_<span class="token punctuation">)</span><span class="token punctuation">;</span>_<span class="token comment">//cpp_</span><span class="token keyword">void</span> <span class="token function">process_map</span><span class="token punctuation">(</span><span class="token keyword">const</span> MapItem<span class="token operator">*</span> _items_<span class="token punctuation">,</span> size_t _count_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        m<span class="token punctuation">[</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>_    <span class="token comment">// ...C++ map_</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="ABI-检测"><a href="#ABI-检测" class="headerlink" title="ABI 检测"></a>ABI 检测</h1><h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><p>abigail-tools</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>sudo apt install abigail-tools</p><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>abidiff   libfoo_1.so libfoo_2.so</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>参考：<a href="https://sourceware.org/libabigail/manual/abidiff.html">abidiff</a></p><table><tr><td>名称<br/></td><td>位值<br/></td><td>说明<br/></td></tr><tr><td>ABIDIFF_ERROR<br/></td><td>1<br/></td><td>有错误<br/></td></tr><tr><td>ABIDIFF_USAGE_ERROR<br/></td><td>2<br/></td><td>用法错误（必须带 ABIDIFF_ERROR）<br/></td></tr><tr><td>ABIDIFF_ABI_CHANGE<br/></td><td>4<br/></td><td>有 ABI 变化<br/></td></tr><tr><td>ABIDIFF_ABI_INCOMPATIBLE_CHANGE<br/></td><td>8<br/></td><td>有 ABI 不兼容变化（必须带 ABI_CHANGE）<br/></td></tr></table><h2 id="常见情况对-ABI-的影响"><a href="#常见情况对-ABI-的影响" class="headerlink" title="常见情况对 ABI 的影响"></a>常见情况对 ABI 的影响</h2><table><tr><td>变化类型<br/></td><td>是否破坏 ABI<br/></td><td>说明<br/></td></tr><tr><td>增加/删除公有接口<br/></td><td>删除/修改才破坏<br/></td><td>增加一般安全<br/></td></tr><tr><td>结构体成员增删/重排<br/></td><td>是<br/></td><td>会导致对象布局变化<br/></td></tr><tr><td>虚表/多态函数增删/重排<br/></td><td>是<br/></td><td>运行时出错<br/></td></tr><tr><td>静态/全局变量符号增删<br/></td><td>是<br/></td><td>链接错误<br/></td></tr><tr><td>编译选项/宏改变<br/></td><td>可能<br/></td><td>看是否影响布局/符号<br/></td></tr><tr><td>STL/三方库升级<br/></td><td>可能<br/></td><td>与所用编译器相关<br/></td></tr></table>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为何我开始写博客</title>
      <link href="/2025/08/31/%E4%B8%BA%E4%BD%95%E6%88%91%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/08/31/%E4%B8%BA%E4%BD%95%E6%88%91%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>这是我个人博客的起点。我相信“输出是最好的输入”，在学习和工作的过程中，零散的笔记难以形成体系。</p><p>因此，我决定搭建这个博客，系统地记录我的技术探索、学习心得和生活中的点滴思考。</p><p>希望这里的文字能帮助未来的自己回顾成长。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
